// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StitchSchemaKit
import Foundation
import MapKit
import Swift
import SwiftUI
import SwiftyJSON
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
extension StitchSchemaKit.StitchDocumentVersion {
  public static func migrate(versionedCodableUrl: Foundation.URL) throws -> StitchSchemaKit.StitchDocumentVersion.NewestVersionType?
}
extension StitchSchemaKit.StitchVersionedCodable {
  public static func upgradeEntities(_ previousEntities: [Self.PreviousCodable]) -> [Self]
}
public protocol StitchVersionedCodable : Swift.Decodable, Swift.Encodable, Swift.Sendable {
  associatedtype PreviousCodable : StitchSchemaKit.StitchVersionedCodable
  init(previousInstance: Self.PreviousCodable)
}
extension StitchSchemaKit.StitchVersionedCodable {
  public init(anyCodable: any StitchSchemaKit.StitchVersionedCodable)
}
public func getStitchEncoder() -> Foundation.JSONEncoder
public func getStitchDecoder() -> Foundation.JSONDecoder
extension StitchSchemaKit.VersionType {
  public static func getOldestVersion() -> Self
  public static func getNewestVersion() -> Self
  public static func getNextVersion(_ version: Self) -> Self?
}
extension CoreFoundation.CGPoint : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftyJSON.JSON : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias CurrentAsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V17
public typealias CurrentClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V17
public typealias CurrentCameraSettings = StitchSchemaKit.CameraSettings_V17
public typealias CurrentCommentBoxData = StitchSchemaKit.CommentBoxData_V17
public typealias CurrentCustomShape = StitchSchemaKit.CustomShape_V17
public typealias CurrentDataType = StitchSchemaKit.DataType_V17
public typealias CurrentDelayStyle = StitchSchemaKit.DelayStyle_V17
public typealias CurrentDateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V17
public typealias CurrentExpansionDirection = StitchSchemaKit.ExpansionDirection_V17
public typealias CurrentGroupNodeIDCoordinate = StitchSchemaKit.GroupNodeID_V17
public typealias CurrentPatch = StitchSchemaKit.Patch_V17
public typealias CurrentPatchNodeEntity = StitchSchemaKit.PatchNodeEntity_V17
public typealias CurrentLayerDimension = StitchSchemaKit.LayerDimension_V17
public typealias CurrentLayerNodeEntity = StitchSchemaKit.LayerNodeEntity_V17
public typealias CurrentLayerNodeId = StitchSchemaKit.LayerNodeId_V17
public typealias CurrentNodeEntity = StitchSchemaKit.NodeEntity_V17
public typealias CurrentNodePortInputEntity = StitchSchemaKit.NodePortInputEntity_V17
public typealias CurrentSplitterNodeEntity = StitchSchemaKit.SplitterNodeEntity_V17
public typealias CurrentSplitterType = StitchSchemaKit.SplitterType_V17
public typealias CurrentNodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V17
public typealias CurrentJSONCurveTo = StitchSchemaKit.JSONCurveTo_V17
public typealias CurrentJSONShapeCommand = StitchSchemaKit.JSONShapeCommand_V17
public typealias CurrentJSONShapeKeys = StitchSchemaKit.JSONShapeKeys_V17
public typealias CurrentSidebarLayerData = StitchSchemaKit.SidebarLayerData_V17
public typealias CurrentNodeKind = StitchSchemaKit.NodeKind_V17
public typealias CurrentAnchoring = StitchSchemaKit.Anchoring_V17
public typealias CurrentCameraDirection = StitchSchemaKit.CameraDirection_V17
public typealias CurrentLayer = StitchSchemaKit.Layer_V17
public typealias CurrentLayerSize = StitchSchemaKit.LayerSize_V17
public typealias CurrentLayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V17
public typealias CurrentLayerStroke = StitchSchemaKit.LayerStroke_V17
public typealias CurrentLayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V17
public typealias CurrentLayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V17
public typealias CurrentLightType = StitchSchemaKit.LightType_V17
public typealias CurrentMediaKey = StitchSchemaKit.MediaKey_V17
public typealias CurrentMobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V17
public typealias CurrentNetworkRequestType = StitchSchemaKit.NetworkRequestType_V17
public typealias CurrentPathPoint = StitchSchemaKit.PathPoint_V17
public typealias CurrentPlane = StitchSchemaKit.Plane_V17
public typealias CurrentPoint3D = StitchSchemaKit.Point3D_V17
public typealias CurrentPoint4D = StitchSchemaKit.Point4D_V17
public typealias CurrentPortValueComparable = StitchSchemaKit.PortValueComparable_V17
public typealias CurrentPreviewSize = StitchSchemaKit.PreviewSize_V17
public typealias CurrentRGBA = StitchSchemaKit.RGBA_V17
public typealias CurrentRoundedRectangleData = StitchSchemaKit.RoundedRectangleData_V17
public typealias CurrentScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V17
public typealias CurrentScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V17
public typealias CurrentScrollMode = StitchSchemaKit.ScrollMode_V17
public typealias CurrentShapeCommand = StitchSchemaKit.ShapeCommand_V17
public typealias CurrentShapeCommandType = StitchSchemaKit.ShapeCommandType_V17
public typealias CurrentShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V17
public typealias CurrentShapeAndRect = StitchSchemaKit.ShapeAndRect_V17
public typealias CurrentStitchDocument = StitchSchemaKit.StitchDocument_V17
public typealias CurrentStitchBlendMode = StitchSchemaKit.StitchBlendMode_V17
public typealias CurrentStitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V17
public typealias CurrentStitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V17
public typealias CurrentStitchMapType = StitchSchemaKit.StitchMapType_V17
public typealias CurrentStitchFont = StitchSchemaKit.StitchFont_V17
public typealias CurrentStitchFontChoice = StitchSchemaKit.StitchFontChoice_V17
public typealias CurrentStitchFontWeight = StitchSchemaKit.StitchFontWeight_V17
public typealias CurrentStitchJSON = StitchSchemaKit.StitchJSON_V17
public typealias CurrentStitchOrientation = StitchSchemaKit.StitchOrientation_V17
public typealias CurrentStitchProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V17
public typealias CurrentTextTransform = StitchSchemaKit.TextTransform_V17
public typealias CurrentTriangleData = StitchSchemaKit.TriangleData_V17
public typealias CurrentPortValue = StitchSchemaKit.PortValue_V17
public typealias CurrentUserVisibleType = StitchSchemaKit.UserVisibleType_V17
public typealias CurrentVisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V17
public typealias CurrentNodeConnectionType = StitchSchemaKit.NodeConnectionType_V17
public typealias CurrentLayerInputType = StitchSchemaKit.LayerInputType_V17
public typealias CurrentNodeIOPortType = StitchSchemaKit.NodeIOPortType_V17
public typealias CurrentStrokeLineCap = StitchSchemaKit.StrokeLineCap_V17
public typealias CurrentStrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V17
public typealias CurrentStitchStringValue = StitchSchemaKit.StitchStringValue_V17
public typealias Anchoring = StitchSchemaKit.CurrentAnchoring.Anchoring
public typealias AsyncMediaValue = StitchSchemaKit.CurrentAsyncMediaValue.AsyncMediaValue
public typealias CameraDirection = StitchSchemaKit.CurrentCameraDirection.CameraDirection
public typealias ClassicAnimationCurve = StitchSchemaKit.CurrentClassicAnimationCurve.ClassicAnimationCurve
public typealias CameraSettings = StitchSchemaKit.CurrentCameraSettings.CameraSettings
public typealias CommentBoxData = StitchSchemaKit.CurrentCommentBoxData.CommentBoxData
public typealias CustomShape = StitchSchemaKit.CurrentCustomShape.CustomShape
public typealias DataType = StitchSchemaKit.CurrentDataType.DataType
public typealias DateAndTimeFormat = StitchSchemaKit.CurrentDateAndTimeFormat.DateAndTimeFormat
public typealias DelayStyle = StitchSchemaKit.CurrentDelayStyle.DelayStyle
public typealias ExpansionDirection = StitchSchemaKit.CurrentExpansionDirection.ExpansionDirection
public typealias GroupNodeId = StitchSchemaKit.CurrentGroupNodeIDCoordinate.GroupNodeId
public typealias JSONCurveTo = StitchSchemaKit.CurrentJSONCurveTo.JSONCurveTo
public typealias JSONShapeCommand = StitchSchemaKit.CurrentJSONShapeCommand.JSONShapeCommand
public typealias JSONShapeKeys = StitchSchemaKit.CurrentJSONShapeKeys.JSONShapeKeys
public typealias Layer = StitchSchemaKit.CurrentLayer.Layer
public typealias LayerDimension = StitchSchemaKit.CurrentLayerDimension.LayerDimension
public typealias LayerNodeEntity = StitchSchemaKit.CurrentLayerNodeEntity.LayerNodeEntity
public typealias LayerNodeId = StitchSchemaKit.CurrentLayerNodeId.LayerNodeId
public typealias LayerSize = StitchSchemaKit.CurrentLayerSize.LayerSize
public typealias LayerTextDecoration = StitchSchemaKit.CurrentLayerTextDecoration.LayerTextDecoration
public typealias LayerStroke = StitchSchemaKit.CurrentLayerStroke.LayerStroke
public typealias LayerTextAlignment = StitchSchemaKit.CurrentLayerTextAlignment.LayerTextAlignment
public typealias LayerTextVerticalAlignment = StitchSchemaKit.CurrentLayerTextVerticalAlignment.LayerTextVerticalAlignment
public typealias LightType = StitchSchemaKit.CurrentLightType.LightType
public typealias MobileHapticStyle = StitchSchemaKit.CurrentMobileHapticStyle.MobileHapticStyle
public typealias MediaKey = StitchSchemaKit.CurrentMediaKey.MediaKey
public typealias NetworkRequestType = StitchSchemaKit.CurrentNetworkRequestType.NetworkRequestType
public typealias NodeEntity = StitchSchemaKit.CurrentNodeEntity.NodeEntity
public typealias NodeKind = StitchSchemaKit.CurrentNodeKind.NodeKind
public typealias NodeIOCoordinate = StitchSchemaKit.CurrentNodeIOCoordinate.NodeIOCoordinate
public typealias NodePortInputEntity = StitchSchemaKit.CurrentNodePortInputEntity.NodePortInputEntity
public typealias Patch = StitchSchemaKit.CurrentPatch.Patch
public typealias PatchNodeEntity = StitchSchemaKit.CurrentPatchNodeEntity.PatchNodeEntity
public typealias PathPoint = StitchSchemaKit.CurrentPathPoint.PathPoint
public typealias Plane = StitchSchemaKit.CurrentPlane.Plane
public typealias Point3D = StitchSchemaKit.CurrentPoint3D.Point3D
public typealias Point4D = StitchSchemaKit.CurrentPoint4D.Point4D
public typealias PortValue = StitchSchemaKit.CurrentPortValue.PortValue
public typealias PortValueComparable = StitchSchemaKit.CurrentPortValueComparable.PortValueComparable
public typealias PreviewSize = StitchSchemaKit.CurrentPreviewSize.PreviewSize
public typealias ProgressIndicatorStyle = StitchSchemaKit.CurrentStitchProgressIndicatorStyle.ProgressIndicatorStyle
public typealias RGBA = StitchSchemaKit.CurrentRGBA.RGBA
public typealias RoundedRectangleData = StitchSchemaKit.CurrentRoundedRectangleData.RoundedRectangleData
public typealias ScrollDecelerationRate = StitchSchemaKit.CurrentScrollDecelerationRate.ScrollDecelerationRate
public typealias ScrollJumpStyle = StitchSchemaKit.CurrentScrollJumpStyle.ScrollJumpStyle
public typealias ScrollMode = StitchSchemaKit.CurrentScrollMode.ScrollMode
public typealias ShapeAndRect = StitchSchemaKit.CurrentShapeAndRect.ShapeAndRect
public typealias ShapeCommand = StitchSchemaKit.CurrentShapeCommand.ShapeCommand
public typealias ShapeCommandType = StitchSchemaKit.CurrentShapeCommandType.ShapeCommandType
public typealias ShapeCoordinates = StitchSchemaKit.CurrentShapeCoordinates.ShapeCoordinates
public typealias SidebarLayerData = StitchSchemaKit.CurrentSidebarLayerData.SidebarLayerData
public typealias SplitterType = StitchSchemaKit.CurrentSplitterType.SplitterType
public typealias SplitterNodeEntity = StitchSchemaKit.CurrentSplitterNodeEntity.SplitterNodeEntity
public typealias StitchDocument = StitchSchemaKit.CurrentStitchDocument.StitchDocument
public typealias StitchBlendMode = StitchSchemaKit.CurrentStitchBlendMode.StitchBlendMode
public typealias StitchCameraOrientation = StitchSchemaKit.CurrentStitchCameraOrientation.StitchCameraOrientation
public typealias StitchDeviceOrientation = StitchSchemaKit.CurrentStitchDeviceOrientation.StitchDeviceOrientation
public typealias StitchMapType = StitchSchemaKit.CurrentStitchMapType.StitchMapType
public typealias StitchFont = StitchSchemaKit.CurrentStitchFont.StitchFont
public typealias StitchFontChoice = StitchSchemaKit.CurrentStitchFontChoice.StitchFontChoice
public typealias StitchFontWeight = StitchSchemaKit.CurrentStitchFontWeight.StitchFontWeight
public typealias StitchJSON = StitchSchemaKit.CurrentStitchJSON.StitchJSON
public typealias StitchOrientation = StitchSchemaKit.CurrentStitchOrientation.StitchOrientation
public typealias TextTransform = StitchSchemaKit.CurrentTextTransform.TextTransform
public typealias TriangleData = StitchSchemaKit.CurrentTriangleData.TriangleData
public typealias UserVisibleType = StitchSchemaKit.CurrentUserVisibleType.UserVisibleType
public typealias VisualMediaFitStyle = StitchSchemaKit.CurrentVisualMediaFitStyle.VisualMediaFitStyle
public typealias NodeConnectionType = StitchSchemaKit.CurrentNodeConnectionType.NodeConnectionType
public typealias LayerInputType = StitchSchemaKit.CurrentLayerInputType.LayerInputType
public typealias NodeIOPortType = StitchSchemaKit.CurrentNodeIOPortType.NodeIOPortType
public typealias StrokeLineCap = StitchSchemaKit.CurrentStrokeLineCap.StrokeLineCap
public typealias StrokeLineJoin = StitchSchemaKit.CurrentStrokeLineJoin.StrokeLineJoin
public typealias StitchStringValue = StitchSchemaKit.CurrentStitchStringValue.StitchStringValue
public enum StitchSchemaVersion : Swift.Int, StitchSchemaKit.VersionType {
  case _V1
  case _V2
  case _V3
  case _V4
  case _V5
  case _V6
  case _V7
  case _V8
  case _V9
  case _V10
  case _V11
  case _V12
  case _V13
  case _V14
  case _V15
  case _V16
  case _V17
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [StitchSchemaKit.StitchSchemaVersion]
  public typealias RawValue = Swift.Int
  public static var allCases: [StitchSchemaKit.StitchSchemaVersion] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VersionType : Swift.CaseIterable, Swift.Comparable, Swift.Decodable, Swift.Encodable, Swift.RawRepresentable {
}
extension StitchSchemaKit.VersionType where Self.RawValue : Swift.Comparable {
  public static func < (a: Self, b: Self) -> Swift.Bool
}
public struct StitchDocumentVersion {
  public typealias NewestVersionType = StitchSchemaKit.CurrentStitchDocument.StitchDocument
  public var version: StitchSchemaKit.StitchSchemaVersion
  public init(version: StitchSchemaKit.StitchSchemaVersion)
}
extension StitchSchemaKit.StitchDocumentVersion {
  public static func getCodableType(from version: StitchSchemaKit.StitchSchemaVersion) -> any StitchSchemaKit.StitchVersionedCodable.Type
}
extension Swift.Array where Element == CoreFoundation.CGPoint {
  public var boundingBoxWidth: CoreFoundation.CGFloat {
    get
  }
  public var boundingBoxHeight: CoreFoundation.CGFloat {
    get
  }
  public var mostNegativeY: CoreFoundation.CGFloat {
    get
  }
  public var mostNegativeX: CoreFoundation.CGFloat {
    get
  }
  public var mostPostiveY: CoreFoundation.CGFloat {
    get
  }
  public var mostPostiveX: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGRect {
  public func yBound(_ baseOriginY: CoreFoundation.CGFloat, _ baseHeight: CoreFoundation.CGFloat, isNorth: Swift.Bool = false) -> CoreFoundation.CGFloat
  public func xBound(_ baseOriginX: CoreFoundation.CGFloat, _ baseWidth: CoreFoundation.CGFloat, isWest: Swift.Bool = false) -> CoreFoundation.CGFloat
}
extension CoreFoundation.CGSize {
  public var area: CoreFoundation.CGFloat {
    get
  }
}
extension StitchSchemaKit.StitchDocument_V17.StitchDocument {
  public static let defaultName: Swift.String
  public static let defaultPreviewWindowSize: CoreFoundation.CGSize
  public static let defaultBackgroundColor: SwiftUI.Color
  public var id: StitchSchemaKit.ProjectId {
    get
  }
}
extension StitchSchemaKit.PreviewSize_V17.PreviewSize {
  public static let defaultOption: StitchSchemaKit.PreviewSize_V17.PreviewSize
}
extension SwiftUI.Color : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case red, green, blue, alpha
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension SwiftUI.Color {
  public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  public var colorComponents: (red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)? {
    get
  }
}
extension simd.simd_float4x4 : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Vision.VNImageCropAndScaleOption : Swift.Codable {
}
extension StitchSchemaKit.ShapeAndRect_V17.ShapeAndRect {
  public var rect: CoreFoundation.CGRect {
    get
  }
  public func north(_ smallestShape: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
  public func south(_ smallestShape: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
  public func west(_ smallestShape: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
  public func east(_ smallestShape: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
}
extension Swift.Array where Element == StitchSchemaKit.JSONShapeCommand_V17.JSONShapeCommand {
  public func getPoints() -> [CoreFoundation.CGPoint]
}
extension StitchSchemaKit.JSONShapeCommand_V17.JSONShapeCommand {
  public var point: CoreFoundation.CGPoint {
    get
  }
}
extension Foundation.URL {
  public var filename: Swift.String {
    get
  }
}
public typealias NodeId = Foundation.UUID
public typealias NodeIdSet = Swift.Set<StitchSchemaKit.NodeId>
public typealias PortValues = [StitchSchemaKit.PortValue]
public typealias StitchMatrix = simd.matrix_float4x4
public typealias StitchPosition = CoreFoundation.CGSize
public typealias ShapeDataArray = [StitchSchemaKit.ShapeAndRect]
public typealias JSONShapeCommands = [StitchSchemaKit.JSONShapeCommand]
public typealias ProjectId = Foundation.UUID
public typealias CommentBoxId = Foundation.UUID
public enum CommentBoxData_V1 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V1.CommentBoxData
  public typealias CommentExpansionBox = StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.CommentBoxId
    public var groupId: StitchSchemaKit.GroupNodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGSize
    public var previousPosition: CoreFoundation.CGSize
    public var expansionBox: StitchSchemaKit.CommentBoxData_V1.CommentExpansionBox
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.GroupNodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGSize = .zero, previousPosition: CoreFoundation.CGSize = .zero, expansionBox: StitchSchemaKit.CommentBoxData_V1.CommentExpansionBox, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V1.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V1.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V1.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CommentExpansionBox_V1 {
  public typealias PreviousInstance = StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox
  public struct CommentExpansionBox : Swift.Equatable, Swift.Hashable {
    public var nodes: StitchSchemaKit.NodeIdSet
    public var expansionDirection: StitchSchemaKit.ExpansionDirection?
    public var size: CoreFoundation.CGSize
    public var previousSize: CoreFoundation.CGSize
    public var startPoint: CoreFoundation.CGPoint
    public var endPoint: CoreFoundation.CGPoint
    public var anchorCorner: CoreFoundation.CGPoint
    public init(nodes: StitchSchemaKit.NodeIdSet = .init(), expansionDirection: StitchSchemaKit.ExpansionDirection? = nil, size: CoreFoundation.CGSize, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, anchorCorner: CoreFoundation.CGPoint? = nil)
    public static func == (a: StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox, b: StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentExpansionBox_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentExpansionBox_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V1.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V1.NodeEntity]
  public typealias CommentBoxesDict = [StitchSchemaKit.CommentBoxId : StitchSchemaKit.CommentBoxData_V1.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V1.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V1.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V1.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public let nodes: StitchSchemaKit.StitchDocument_V1.NodeEntitySchemas
    public let orderedSidebarLayers: StitchSchemaKit.StitchDocument_V1.SidebarLayerDataList
    public let commentBoxesDict: StitchSchemaKit.StitchDocument_V1.CommentBoxesDict
    public let cameraSettings: StitchSchemaKit.StitchDocument_V1.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V1.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V1.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V1.SidebarLayerDataList, commentBoxesDict: StitchSchemaKit.StitchDocument_V1.CommentBoxesDict, cameraSettings: StitchSchemaKit.StitchDocument_V1.CameraSettings)
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V1.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V1.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V1.PreviousInstance)
}
public enum ExpansionDirection_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V1.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V1.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V1.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V1.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InteractionType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.InteractionType_V1.InteractionType
  public enum InteractionType : Swift.String, Swift.Equatable {
    case drag, press, scroll
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.InteractionType_V1.InteractionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.InteractionType_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.InteractionType_V1.PreviousInstance
}
public enum Layer_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V1.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V1.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V1.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V1.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V1.PreviousInstance
}
public enum GroupNodeID_V1 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V1.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V1.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V1.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V1.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V1 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V1.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V1.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V1.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V1.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V1
  public typealias Layer = StitchSchemaKit.Layer_V1.Layer
  public typealias InteractionsDict = [StitchSchemaKit.InteractionType_V1.InteractionType : StitchSchemaKit.NodeIdSet]
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V1.Layer
    public let interactionsDict: StitchSchemaKit.LayerNodeEntity_V1.InteractionsDict
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V1.Layer, interactionsDict: StitchSchemaKit.LayerNodeEntity_V1.InteractionsDict, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V1.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V1.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V1.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SidebarLayerData_V1 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V1 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V1.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V1
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V1
  public typealias NodePortInputEntitySchema = StitchSchemaKit.NodePortInputEntity_V1
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let position: CoreFoundation.CGPoint
    public let zIndex: Swift.Double
    public let parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V1.PatchNodeEntitySchema.PatchNodeEntity?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V1.LayerNodeEntitySchema.LayerNodeEntity?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: [StitchSchemaKit.NodeEntity_V1.NodePortInputEntitySchema.NodePortInputEntity]
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V1.PatchNodeEntitySchema.PatchNodeEntity?, layerNodeEntity: StitchSchemaKit.NodeEntity_V1.LayerNodeEntitySchema.LayerNodeEntity?, isGroupNode: Swift.Bool, title: Swift.String, inputs: [StitchSchemaKit.NodeEntity_V1.NodePortInputEntitySchema.NodePortInputEntity])
    public static func == (a: StitchSchemaKit.NodeEntity_V1.NodeEntity, b: StitchSchemaKit.NodeEntity_V1.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V1.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V1 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V1.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V1.NodeKind, b: StitchSchemaKit.NodeKind_V1.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V1.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V1.PreviousInstance
}
public enum PatchNodeEntity_V1 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V1.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V1.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V1.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V1.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V1.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V1.SplitterNodeEntitySchema?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V1.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V1.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V1.SplitterNodeEntitySchema?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V1.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V1.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V1.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V1 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portId: Swift.Int
    public var nodeId: StitchSchemaKit.NodeId
    public init(portId: Swift.Int, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V1 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V1.NodePortInputEntity
  public typealias PortValueSchema = StitchSchemaKit.PortValue_V1.PortValue
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V1.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V1.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodePortInputEntity_V1.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V1.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V1.UserVisibleType?
    public let values: [StitchSchemaKit.NodePortInputEntity_V1.PortValueSchema]?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V1.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V1.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V1.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V1.UserVisibleType?, values: [StitchSchemaKit.NodePortInputEntity_V1.PortValueSchema]?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V1.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V1.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V1.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V1.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V1 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V1.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V1.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V1.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V1.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V1.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V1.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V1.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V1.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V1.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V1.ScrollMode
  public typealias TextAlignment = StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment
  public typealias TextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V1.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V1.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V1.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V1.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V1.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V1.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V1.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V1.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V1.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V1.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V1.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V1.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V1.Point3D)
    case point4D(StitchSchemaKit.PortValue_V1.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V1.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V1.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V1.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V1.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V1.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V1.TextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V1.TextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V1.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V1.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V1.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V1.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V1.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V1.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V1.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V1.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V1.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V1.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V1.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V1.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V1.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V1.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V1.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V1.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V1.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V1.StitchFont)
    public static func == (a: StitchSchemaKit.PortValue_V1.PortValue, b: StitchSchemaKit.PortValue_V1.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V1.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V1.PreviousInstance
}
public enum Patch_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V1.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V1.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V1.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V1.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V1.PreviousInstance
}
public enum Anchoring_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V1.Anchoring
  public enum Anchoring : Swift.String, Swift.CaseIterable {
    case topLeft, topCenter, topRight, centerLeft, center, centerRight, bottomLeft, bottomCenter, bottomRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Anchoring_V1.Anchoring]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Anchoring_V1.Anchoring] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Anchoring_V1.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V1.PreviousInstance
}
public enum AsyncMediaValue_V1 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V1.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V1.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V1.PreviousInstance
}
public enum CameraDirection_V1 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V1.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V1.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V1.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V1.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V1.PreviousInstance
}
public enum CameraSettings_V1 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V1.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V1.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V1.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V1.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V1.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V1.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V1.CameraSettings, b: StitchSchemaKit.CameraSettings_V1.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V1.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V1.PreviousInstance
}
public enum CustomShape_V1 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V1.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V1.CustomShape, b: StitchSchemaKit.CustomShape_V1.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V1.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V1.PreviousInstance
}
public enum DataType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V1.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V1.DataType<Value>, b: StitchSchemaKit.DataType_V1.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V1.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V1.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V1.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V1 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V1.PreviousInstance
}
public enum DelayStyle_V1 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V1.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V1.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V1.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V1.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V1.PreviousInstance
}
public enum JSONCurveTo_V1 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V1 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V1.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V1.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V1.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V1.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V1.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V1 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V1.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V1.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerTextDecoration_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V1.PreviousInstance
}
public enum LayerDimension_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V1.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double)
    public static func == (a: StitchSchemaKit.LayerDimension_V1.LayerDimension, b: StitchSchemaKit.LayerDimension_V1.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V1.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V1.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V1.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V1.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V1.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V1.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V1.LayerSize, b: StitchSchemaKit.LayerSize_V1.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V1.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V1.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V1.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V1.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V1.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V1.PreviousInstance
}
public enum LayerTextAlignment_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V1.PreviousInstance
}
public enum LayerTextVerticalAlignment_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V1.PreviousInstance
}
public enum LightType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V1.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V1.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V1.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V1.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V1.PreviousInstance
}
public enum MediaKey_V1 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V1.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V1.MediaKey, b: StitchSchemaKit.MediaKey_V1.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V1.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V1.PreviousInstance
}
public enum MediaObjectId_V1 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V1.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V1.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V1.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V1.PreviousInstance
}
public enum NetworkRequestType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V1.PreviousInstance
}
public enum PathPoint_V1 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V1.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V1.PathPoint, b: StitchSchemaKit.PathPoint_V1.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V1.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V1.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V1.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V1.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V1.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V1.PreviousInstance
}
public enum Point3D_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V1.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V1.Point3D, b: StitchSchemaKit.Point3D_V1.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V1.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V1 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V1.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V1.Point4D, b: StitchSchemaKit.Point4D_V1.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V1.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V1 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V1.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V1.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V1.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V1.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RGBA_V1 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V1.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V1.RGBA, b: StitchSchemaKit.RGBA_V1.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V1.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V1 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V1.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V1.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V1.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V1.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V1.PreviousInstance
}
public enum ScrollJumpStyle_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V1.PreviousInstance
}
public enum ScrollMode_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V1.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V1.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V1.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V1.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V1.PreviousInstance
}
public enum ShapeAndRect_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V1.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V1.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V1.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V1.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V1.PreviousInstance
}
public enum ShapeCommand_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V1.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V1.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V1.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V1.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V1.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V1.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V1 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V1.PreviousInstance
}
public enum StitchCameraOrientation_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V1.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V1.PreviousInstance
}
public enum StitchDeviceOrientation_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V1.PreviousInstance
}
public enum StitchFontChoice_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V1.PreviousInstance
}
public enum StitchFontWeight_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V1.PreviousInstance
}
public enum StitchFont_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V1.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V1.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V1.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V1.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V1.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V1.StitchFont, b: StitchSchemaKit.StitchFont_V1.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V1.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V1.PreviousInstance
}
public enum StitchJSON_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V1.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V1.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V1.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V1.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchOrientation_V1 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V1.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V1.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V1.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V1.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V1.PreviousInstance
}
public enum TextTransform_V1 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V1.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V1.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V1.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V1.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V1.PreviousInstance
}
public enum TriangleData_V1 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V1.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V1.TriangleData, b: StitchSchemaKit.TriangleData_V1.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V1.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V1.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V1 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V1.PreviousInstance
}
public enum PreviewSize_V1 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V1.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V1.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V1.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V1.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V1.PreviousInstance
}
public enum SplitterType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V1.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V1.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V1.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V1.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V1.PreviousInstance
}
public enum UserVisibleType_V1 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V1.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V1.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V1.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V1.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V1.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V1.PreviousInstance
}
public enum CommentBoxData_V10 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V9.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V10.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V10.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V10.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V9.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V10.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V10.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V10.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V10.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V10.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V10.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V10.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V10.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V10.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V10.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V10.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V10.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V10.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V10.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V10.StitchDocument, b: StitchSchemaKit.StitchDocument_V10.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V10.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V10.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V10.PreviousInstance)
}
public enum ExpansionDirection_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V9.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V10.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V10.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V10.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V9.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V10.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V10.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V10.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V10.PreviousInstance
}
public enum GroupNodeID_V10 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V10.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V10.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V10.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V10.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V10 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V9.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V10.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V10.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V10.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V10.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V10.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V10.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V10
  public typealias Layer = StitchSchemaKit.Layer_V10.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V10.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V10.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), sizePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), scalePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), anchoringPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), opacityPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), zIndexPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), masksPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), colorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), rotationXPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), rotationYPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), rotationZPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), lineColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), lineWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), blurPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), blendModePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), brightnessPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), colorInvertPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), contrastPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), hueRotationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), saturationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), pivotPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), enabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), isClippedPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), orientationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), paddingPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), setupModePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), shapePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), strokePositionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), strokeColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), strokeStartPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), strokeEndPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), textPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), fontSizePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), textDecorationPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), textFontPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), imagePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), videoPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), fitStylePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), clippedPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), progressPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), model3DPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), mapTypePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), mapSpanPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), startColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), endColorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), startAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), endAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), startAnglePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), endAnglePort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), startRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), endRadiusPort: StitchSchemaKit.LayerNodeEntity_V10.NodeConnectionType = .values([]), hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V9.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V10.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V10.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V10.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V10.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V10.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V10.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V10.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V10.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V10.NodeEntity, b: StitchSchemaKit.NodeEntity_V10.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V10.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V9.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V10.NodeKind, b: StitchSchemaKit.NodeKind_V10.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V10.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V10.PreviousInstance
}
public enum PatchNodeEntity_V10 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V9.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V10.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V10.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V10.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V10.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V10.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V10.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V10.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V10.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V10.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V10.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V10.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V10.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V9.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case canvasPosition
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    public static func == (a: StitchSchemaKit.LayerInputType_V10.LayerInputType, b: StitchSchemaKit.LayerInputType_V10.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V10.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V10.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V10.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V10.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V10.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V10.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V10.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V10.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V10.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V10.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V10.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V9.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V10.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V10.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V10.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V10.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V10.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V10.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V10.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V10.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V10.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V10.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V10.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V10.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V10.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V10.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V10.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V10.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V10.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V10.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V10.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V10 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V9.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V10.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V10.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V10.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V10.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V10.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V10.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V10.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V10.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V10.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V10.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V10.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V10.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V10.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V10.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V10.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V10.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V10.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V10.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V10.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V10.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V10.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V10.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V10.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V10.Point3D)
    case point4D(StitchSchemaKit.PortValue_V10.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V10.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V10.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V10.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V10.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V10.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V10.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V10.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V10.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V10.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V10.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V10.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V10.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V10.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V10.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V10.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V10.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V10.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V10.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V10.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V10.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V10.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V10.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V10.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V10.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V10.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V10.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V10.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V10.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V10.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V10.PortValue, b: StitchSchemaKit.PortValue_V10.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V10.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V10.PreviousInstance
}
public enum Patch_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V9.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V10.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V10.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V10.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V10.PreviousInstance
}
public enum Anchoring_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V9.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V10.Anchoring, b: StitchSchemaKit.Anchoring_V10.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V10.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V10.PreviousInstance
}
public enum AsyncMediaValue_V10 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V9.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V10.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V10.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V10.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V10.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V10.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V10.PreviousInstance
}
public enum CameraDirection_V10 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V9.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V10.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V10.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V10.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V10.PreviousInstance
}
public enum CameraSettings_V10 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V9.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V10.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V10.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V10.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V10.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V10.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V10.CameraSettings, b: StitchSchemaKit.CameraSettings_V10.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V10.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V10.PreviousInstance
}
public enum CustomShape_V10 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V9.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V10.CustomShape, b: StitchSchemaKit.CustomShape_V10.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V10.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V10.PreviousInstance
}
public enum DataType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V9.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V10.DataType<Value>, b: StitchSchemaKit.DataType_V10.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V10.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V8.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V8.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V10 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V10.PreviousInstance
}
public enum DelayStyle_V10 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V9.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V10.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V10.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V10.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V10.PreviousInstance
}
public enum JSONCurveTo_V10 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V9.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V10.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V10.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V10.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V10 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V9.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V10.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V10.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V10.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V10.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V10.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V10 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V9.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V10.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V9.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V10.LayerDimension, b: StitchSchemaKit.LayerDimension_V10.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V10.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V9.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V10.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V10.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V10.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V9.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V10.LayerSize, b: StitchSchemaKit.LayerSize_V10.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V10.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V9.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V10.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V10.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V10.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V10.PreviousInstance
}
public enum LayerTextAlignment_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V10.PreviousInstance
}
public enum LayerTextDecoration_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V10.PreviousInstance
}
public enum LayerTextVerticalAlignment_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V10.PreviousInstance
}
public enum LightType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V9.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V10.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V10.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V10.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V10.PreviousInstance
}
public enum MediaKey_V10 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V9.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V10.MediaKey, b: StitchSchemaKit.MediaKey_V10.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V10.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V10.PreviousInstance
}
public enum MediaObjectId_V10 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V9.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V10.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V10.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V10.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V10.PreviousInstance
}
public enum MobileHapticStyle_V10 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V10.PreviousInstance
}
public enum NetworkRequestType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V10.PreviousInstance
}
public enum PathPoint_V10 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V9.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V10.PathPoint, b: StitchSchemaKit.PathPoint_V10.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V10.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V9.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V10.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V10.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V10.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V10.PreviousInstance
}
public enum Point3D_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V9.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V10.Point3D, b: StitchSchemaKit.Point3D_V10.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V10.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V10 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V9.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V10.Point4D, b: StitchSchemaKit.Point4D_V10.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V10.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V10 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V9.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V10.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V10.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V10.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V10.PreviousInstance
}
public enum RGBA_V10 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V9.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V10.RGBA, b: StitchSchemaKit.RGBA_V10.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V10.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V10 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V9.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V10.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V10.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V10.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V10.PreviousInstance
}
public enum ScrollJumpStyle_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V10.PreviousInstance
}
public enum ScrollMode_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V9.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V10.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V10.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V10.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V10.PreviousInstance
}
public enum ShapeAndRect_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V9.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V10.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V10.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V10.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V10.PreviousInstance
}
public enum ShapeCommand_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V9.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V10.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V10.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V10.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V10.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V10.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V10 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V10.PreviousInstance
}
public enum SidebarLayerData_V10 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V10.PreviousInstance
}
public enum StitchCameraOrientation_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V10.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V10.PreviousInstance
}
public enum StitchDeviceOrientation_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V10.PreviousInstance
}
public enum StitchFontChoice_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V10.PreviousInstance
}
public enum StitchFontWeight_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V10.PreviousInstance
}
public enum StitchFont_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V9.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V10.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V10.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V10.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V10.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V10.StitchFont, b: StitchSchemaKit.StitchFont_V10.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V10.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V10.PreviousInstance
}
public enum StitchJSON_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V9.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V10.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V10.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V10.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V9.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V10.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V10.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V10.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V10.PreviousInstance
}
public enum StitchOrientation_V10 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V9.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V10.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V10.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V10.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V10.PreviousInstance
}
public enum TextTransform_V10 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V9.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V10.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V10.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V10.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V10.PreviousInstance
}
public enum TriangleData_V10 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V9.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V10.TriangleData, b: StitchSchemaKit.TriangleData_V10.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V10.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V10.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V10 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V10.PreviousInstance
}
public enum PreviewSize_V10 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V9.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V10.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V10.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V10.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V10.PreviousInstance
}
public enum SplitterType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V9.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V10.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V10.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V10.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V10.PreviousInstance
}
public enum UserVisibleType_V10 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V9.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V10.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V10.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V10.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V10.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V10.PreviousInstance
}
public enum CommentBoxData_V11 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V10.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V11.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V11.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V11.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V10.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V11.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V11.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V11.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V11.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V11.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V11.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V11.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V11.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V11.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V11.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V11.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V11.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V11.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V11.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V11.StitchDocument, b: StitchSchemaKit.StitchDocument_V11.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V11.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V11.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V11.PreviousInstance)
}
public enum ExpansionDirection_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V10.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V11.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V11.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V11.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V10.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V11.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V11.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V11.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V11.PreviousInstance
}
public enum GroupNodeID_V11 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V11.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V11.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V11.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V11.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V11 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V10.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V11.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V11.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V11.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V11.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V11.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V11.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V10.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V11
  public typealias Layer = StitchSchemaKit.Layer_V11.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V11.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V11.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V11.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V10.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V11.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V11.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V11.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V11.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V11.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V11.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V11.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V11.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V11.NodeEntity, b: StitchSchemaKit.NodeEntity_V11.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V11.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V10.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V11.NodeKind, b: StitchSchemaKit.NodeKind_V11.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V11.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V11.PreviousInstance
}
public enum PatchNodeEntity_V11 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V10.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V11.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V11.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V11.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V11.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V11.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V11.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V11.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V11.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V11.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V11.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V11.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V11.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V10.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    public static func == (a: StitchSchemaKit.LayerInputType_V11.LayerInputType, b: StitchSchemaKit.LayerInputType_V11.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V11.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V11.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V10.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V11.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V11.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V11.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V11.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V11.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V11.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V11.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V11.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V11.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V10.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V11.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V11.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V11.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V11.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V11.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V11.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V11.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V11.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V11.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V11.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V11.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V11.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V11.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V11.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V11.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V11.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V10.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V11.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V11.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V11.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V11 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V10.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V11.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V11.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V11.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V11.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V11.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V11.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V11.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V11.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V11.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V11.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V11.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V11.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V11.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V11.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V11.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V11.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V11.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V11.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V11.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V11.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V11.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V11.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V11.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V11.Point3D)
    case point4D(StitchSchemaKit.PortValue_V11.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V11.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V11.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V11.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V11.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V11.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V11.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V11.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V11.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V11.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V11.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V11.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V11.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V11.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V11.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V11.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V11.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V11.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V11.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V11.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V11.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V11.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V11.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V11.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V11.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V11.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V11.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V11.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V11.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V11.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V11.PortValue, b: StitchSchemaKit.PortValue_V11.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V11.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V11.PreviousInstance
}
public enum Patch_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V10.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V11.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V11.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V11.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V11.PreviousInstance
}
public enum Anchoring_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V10.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V11.Anchoring, b: StitchSchemaKit.Anchoring_V11.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V11.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V11.PreviousInstance
}
public enum AsyncMediaValue_V11 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V10.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V11.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V11.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V11.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V11.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V11.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V11.PreviousInstance
}
public enum CameraDirection_V11 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V10.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V11.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V11.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V11.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V11.PreviousInstance
}
public enum CameraSettings_V11 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V10.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V11.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V11.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V11.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V11.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V11.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V11.CameraSettings, b: StitchSchemaKit.CameraSettings_V11.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V11.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V11.PreviousInstance
}
public enum CustomShape_V11 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V10.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V11.CustomShape, b: StitchSchemaKit.CustomShape_V11.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V11.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V11.PreviousInstance
}
public enum DataType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V10.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V11.DataType<Value>, b: StitchSchemaKit.DataType_V11.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V11.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V9.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V9.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V11 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V11.PreviousInstance
}
public enum DelayStyle_V11 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V10.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V11.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V11.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V11.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V11.PreviousInstance
}
public enum JSONCurveTo_V11 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V10.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V11.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V11.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V11.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V11 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V10.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V11.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V11.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V11.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V11.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V11.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V11 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V10.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V11.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V10.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V11.LayerDimension, b: StitchSchemaKit.LayerDimension_V11.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V11.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V10.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V11.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V11.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V11.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V10.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V11.LayerSize, b: StitchSchemaKit.LayerSize_V11.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V11.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V10.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V11.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V11.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V11.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V11.PreviousInstance
}
public enum LayerTextAlignment_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V11.PreviousInstance
}
public enum LayerTextDecoration_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V11.PreviousInstance
}
public enum LayerTextVerticalAlignment_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V11.PreviousInstance
}
public enum LightType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V10.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V11.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V11.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V11.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V11.PreviousInstance
}
public enum MediaKey_V11 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V10.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V11.MediaKey, b: StitchSchemaKit.MediaKey_V11.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V11.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V11.PreviousInstance
}
public enum MediaObjectId_V11 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V10.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V11.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V11.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V11.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V11.PreviousInstance
}
public enum MobileHapticStyle_V11 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V11.PreviousInstance
}
public enum NetworkRequestType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V11.PreviousInstance
}
public enum PathPoint_V11 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V10.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V11.PathPoint, b: StitchSchemaKit.PathPoint_V11.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V11.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V10.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V11.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V11.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V11.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V11.PreviousInstance
}
public enum Point3D_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V10.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V11.Point3D, b: StitchSchemaKit.Point3D_V11.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V11.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V11 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V10.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V11.Point4D, b: StitchSchemaKit.Point4D_V11.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V11.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V11 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V10.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V11.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V11.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V11.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V11.PreviousInstance
}
public enum RGBA_V11 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V10.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V11.RGBA, b: StitchSchemaKit.RGBA_V11.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V11.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V11 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V10.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V11.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V11.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V11.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V11.PreviousInstance
}
public enum ScrollJumpStyle_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V11.PreviousInstance
}
public enum ScrollMode_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V10.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V11.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V11.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V11.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V11.PreviousInstance
}
public enum ShapeAndRect_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V10.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V11.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V11.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V11.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V11.PreviousInstance
}
public enum ShapeCommand_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V10.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V11.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V11.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V11.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V11.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V11.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V11 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V11.PreviousInstance
}
public enum SidebarLayerData_V11 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V10.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V11.PreviousInstance
}
public enum StitchCameraOrientation_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V11.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V11.PreviousInstance
}
public enum StitchDeviceOrientation_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V11.PreviousInstance
}
public enum StitchFontChoice_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V11.PreviousInstance
}
public enum StitchFontWeight_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V11.PreviousInstance
}
public enum StitchFont_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V10.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V11.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V11.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V11.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V11.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V11.StitchFont, b: StitchSchemaKit.StitchFont_V11.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V11.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V11.PreviousInstance
}
public enum StitchJSON_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V10.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V11.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V11.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V11.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V10.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V11.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V11.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V11.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V11.PreviousInstance
}
public enum StitchOrientation_V11 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V10.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V11.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V11.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V11.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V11.PreviousInstance
}
public enum TextTransform_V11 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V10.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V11.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V11.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V11.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V11.PreviousInstance
}
public enum TriangleData_V11 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V10.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V11.TriangleData, b: StitchSchemaKit.TriangleData_V11.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V11.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V11.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V11 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V11.PreviousInstance
}
public enum PreviewSize_V11 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V10.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V11.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V11.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V11.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V11.PreviousInstance
}
public enum SplitterType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V10.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V11.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V11.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V11.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V11.PreviousInstance
}
public enum UserVisibleType_V11 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V10.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V11.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V11.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V11.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V11.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V11.PreviousInstance
}
public enum CommentBoxData_V12 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V11.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V12.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V12.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V12.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V11.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V12.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V12.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V12.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V12.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V12.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V12.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V12.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V12.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V12.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V12.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V12.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V12.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V12.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V12.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V12.StitchDocument, b: StitchSchemaKit.StitchDocument_V12.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V12.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V12.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V12.PreviousInstance)
}
public enum ExpansionDirection_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V11.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V12.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V12.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V12.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V11.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V12.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V12.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V12.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V12.PreviousInstance
}
public enum GroupNodeID_V12 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V12.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V12.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V12.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V12.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V12 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V11.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V12.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V12.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V12.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V12.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V12.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V12.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V11.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V12
  public typealias Layer = StitchSchemaKit.Layer_V12.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V12.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V12.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V12.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V11.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V12.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V12.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V12.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V12.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V12.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V12.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V12.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V12.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V12.NodeEntity, b: StitchSchemaKit.NodeEntity_V12.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V12.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V11.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V12.NodeKind, b: StitchSchemaKit.NodeKind_V12.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V12.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V12.PreviousInstance
}
public enum PatchNodeEntity_V12 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V11.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V12.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V12.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V12.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V12.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V12.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V12.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V12.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V12.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V12.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V12.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V12.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V12.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V11.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    public static func == (a: StitchSchemaKit.LayerInputType_V12.LayerInputType, b: StitchSchemaKit.LayerInputType_V12.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V12.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V12.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V11.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V12.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V12.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V12.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V12.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V12.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V12.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V12.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V12.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V12.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V11.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V12.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V12.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V12.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V12.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V12.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V12.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V12.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V12.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V12.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V12.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V12.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V12.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V12.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V12.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V12.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V12.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V11.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V12.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V12.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V12.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V12 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V11.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V12.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V12.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V12.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V12.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V12.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V12.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V12.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V12.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V12.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V12.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V12.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V12.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V12.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V12.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V12.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V12.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V12.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V12.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V12.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V12.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V12.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V12.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V12.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V12.Point3D)
    case point4D(StitchSchemaKit.PortValue_V12.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V12.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V12.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V12.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V12.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V12.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V12.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V12.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V12.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V12.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V12.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V12.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V12.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V12.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V12.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V12.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V12.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V12.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V12.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V12.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V12.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V12.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V12.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V12.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V12.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V12.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V12.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V12.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V12.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V12.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V12.PortValue, b: StitchSchemaKit.PortValue_V12.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V12.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V12.PreviousInstance
}
public enum Patch_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V11.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V12.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V12.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V12.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V12.PreviousInstance
}
public enum Anchoring_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V11.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V12.Anchoring, b: StitchSchemaKit.Anchoring_V12.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V12.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V12.PreviousInstance
}
public enum AsyncMediaValue_V12 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V11.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V12.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V12.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V12.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V12.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V12.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V12.PreviousInstance
}
public enum CameraDirection_V12 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V11.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V12.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V12.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V12.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V12.PreviousInstance
}
public enum CameraSettings_V12 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V11.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V12.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V12.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V12.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V12.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V12.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V12.CameraSettings, b: StitchSchemaKit.CameraSettings_V12.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V12.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V12.PreviousInstance
}
public enum CustomShape_V12 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V11.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V12.CustomShape, b: StitchSchemaKit.CustomShape_V12.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V12.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V12.PreviousInstance
}
public enum DataType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V11.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V12.DataType<Value>, b: StitchSchemaKit.DataType_V12.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V12.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V10.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V10.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V12 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V12.PreviousInstance
}
public enum DelayStyle_V12 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V11.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V12.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V12.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V12.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V12.PreviousInstance
}
public enum JSONCurveTo_V12 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V11.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V12.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V12.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V12.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V12 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V11.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V12.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V12.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V12.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V12.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V12.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V12 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V11.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V12.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V11.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V12.LayerDimension, b: StitchSchemaKit.LayerDimension_V12.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V12.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V11.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V12.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V12.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V12.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V11.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V12.LayerSize, b: StitchSchemaKit.LayerSize_V12.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V12.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V11.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V12.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V12.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V12.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V12.PreviousInstance
}
public enum LayerTextAlignment_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V12.PreviousInstance
}
public enum LayerTextDecoration_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V12.PreviousInstance
}
public enum LayerTextVerticalAlignment_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V12.PreviousInstance
}
public enum LightType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V11.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V12.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V12.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V12.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V12.PreviousInstance
}
public enum MediaKey_V12 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V11.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V12.MediaKey, b: StitchSchemaKit.MediaKey_V12.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V12.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V12.PreviousInstance
}
public enum MediaObjectId_V12 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V11.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V12.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V12.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V12.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V12.PreviousInstance
}
public enum MobileHapticStyle_V12 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V12.PreviousInstance
}
public enum NetworkRequestType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V12.PreviousInstance
}
public enum PathPoint_V12 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V11.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V12.PathPoint, b: StitchSchemaKit.PathPoint_V12.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V12.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V11.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V12.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V12.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V12.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V12.PreviousInstance
}
public enum Point3D_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V11.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V12.Point3D, b: StitchSchemaKit.Point3D_V12.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V12.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V12 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V11.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V12.Point4D, b: StitchSchemaKit.Point4D_V12.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V12.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V12 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V11.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V12.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V12.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V12.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V12.PreviousInstance
}
public enum RGBA_V12 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V11.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V12.RGBA, b: StitchSchemaKit.RGBA_V12.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V12.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V12 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V11.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V12.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V12.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V12.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V12.PreviousInstance
}
public enum ScrollJumpStyle_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V12.PreviousInstance
}
public enum ScrollMode_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V11.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V12.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V12.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V12.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V12.PreviousInstance
}
public enum ShapeAndRect_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V11.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V12.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V12.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V12.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V12.PreviousInstance
}
public enum ShapeCommand_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V11.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V12.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V12.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V12.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V12.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V12.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V12 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V12.PreviousInstance
}
public enum SidebarLayerData_V12 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V11.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V12.PreviousInstance
}
public enum StitchCameraOrientation_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V12.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V12.PreviousInstance
}
public enum StitchDeviceOrientation_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V12.PreviousInstance
}
public enum StitchFontChoice_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V12.PreviousInstance
}
public enum StitchFontWeight_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V12.PreviousInstance
}
public enum StitchFont_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V11.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V12.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V12.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V12.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V12.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V12.StitchFont, b: StitchSchemaKit.StitchFont_V12.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V12.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V12.PreviousInstance
}
public enum StitchJSON_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V11.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V12.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V12.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V12.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V11.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V12.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V12.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V12.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V12.PreviousInstance
}
public enum StitchOrientation_V12 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V11.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V12.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V12.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V12.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V12.PreviousInstance
}
public enum TextTransform_V12 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V11.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V12.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V12.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V12.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V12.PreviousInstance
}
public enum TriangleData_V12 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V11.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V12.TriangleData, b: StitchSchemaKit.TriangleData_V12.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V12.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V12.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V12 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V12.PreviousInstance
}
public enum PreviewSize_V12 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V11.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V12.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V12.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V12.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V12.PreviousInstance
}
public enum SplitterType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V11.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V12.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V12.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V12.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V12.PreviousInstance
}
public enum UserVisibleType_V12 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V11.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V12.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V12.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V12.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V12.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V12.PreviousInstance
}
public enum CommentBoxData_V13 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V12.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V13.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V13.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V13.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V12.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V13.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V13.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V13.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V13.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V13.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V13.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V13.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V13.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V13.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V13.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V13.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V13.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V13.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V13.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V13.StitchDocument, b: StitchSchemaKit.StitchDocument_V13.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V13.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V13.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V13.PreviousInstance)
}
public enum ExpansionDirection_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V12.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V13.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V13.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V13.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V12.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V13.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V13.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V13.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V13.PreviousInstance
}
public enum GroupNodeID_V13 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V13.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V13.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V13.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V13.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V13 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V12.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V13.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V13.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V13.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V13.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V13.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V13.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V12.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V13
  public typealias Layer = StitchSchemaKit.Layer_V13.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V13.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V13.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V13.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V12.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V13.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V13.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V13.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V13.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V13.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V13.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V13.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V13.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V13.NodeEntity, b: StitchSchemaKit.NodeEntity_V13.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V13.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V12.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V13.NodeKind, b: StitchSchemaKit.NodeKind_V13.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V13.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V13.PreviousInstance
}
public enum PatchNodeEntity_V13 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V12.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V13.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V13.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V13.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V13.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V13.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V13.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V13.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V13.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V13.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V13.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V13.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V13.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V12.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case strokeLineCap
    case strokeLineJoin
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    public static func == (a: StitchSchemaKit.LayerInputType_V13.LayerInputType, b: StitchSchemaKit.LayerInputType_V13.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V13.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V13.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V12.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V13.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V13.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V13.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V13.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V13.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V13.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V13.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V13.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V13.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V12.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V13.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V13.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V13.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V13.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V13.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V13.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V13.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V13.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V13.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V13.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V13.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V13.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V13.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V13.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V13.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V13.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V12.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V13.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V13.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V13.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V13 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V12.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V13.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V13.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V13.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V13.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V13.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V13.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V13.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V13.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V13.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V13.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V13.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V13.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V13.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V13.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V13.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V13.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V13.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V13.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V13.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle
  public typealias StrokeLineCap = StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap
  public typealias StrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V13.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V13.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V13.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V13.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V13.Point3D)
    case point4D(StitchSchemaKit.PortValue_V13.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V13.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V13.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V13.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V13.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V13.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V13.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V13.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V13.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V13.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V13.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V13.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V13.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V13.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V13.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V13.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V13.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V13.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V13.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V13.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V13.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V13.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V13.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V13.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V13.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V13.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V13.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V13.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V13.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V13.MobileHapticStyle)
    case strokeLineCap(StitchSchemaKit.PortValue_V13.StrokeLineCap)
    case strokeLineJoin(StitchSchemaKit.PortValue_V13.StrokeLineJoin)
    public static func == (a: StitchSchemaKit.PortValue_V13.PortValue, b: StitchSchemaKit.PortValue_V13.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V13.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V13.PreviousInstance
}
public enum Patch_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V12.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V13.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V13.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V13.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V13.PreviousInstance
}
public enum Anchoring_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V12.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V13.Anchoring, b: StitchSchemaKit.Anchoring_V13.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V13.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V13.PreviousInstance
}
public enum AsyncMediaValue_V13 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V12.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V13.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V13.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V13.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V13.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V13.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V13.PreviousInstance
}
public enum CameraDirection_V13 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V12.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V13.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V13.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V13.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V13.PreviousInstance
}
public enum CameraSettings_V13 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V12.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V13.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V13.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V13.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V13.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V13.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V13.CameraSettings, b: StitchSchemaKit.CameraSettings_V13.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V13.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V13.PreviousInstance
}
public enum CustomShape_V13 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V12.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V13.CustomShape, b: StitchSchemaKit.CustomShape_V13.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V13.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V13.PreviousInstance
}
public enum DataType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V12.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V13.DataType<Value>, b: StitchSchemaKit.DataType_V13.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V13.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V11.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V11.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V13 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V13.PreviousInstance
}
public enum DelayStyle_V13 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V12.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V13.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V13.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V13.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V13.PreviousInstance
}
public enum JSONCurveTo_V13 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V12.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V13.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V13.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V13.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V13 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V12.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V13.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V13.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V13.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V13.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V13.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V13 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V12.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V13.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V12.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V13.LayerDimension, b: StitchSchemaKit.LayerDimension_V13.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V13.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V12.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V13.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V13.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V13.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V12.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V13.LayerSize, b: StitchSchemaKit.LayerSize_V13.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V13.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V12.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V13.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V13.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V13.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V13.PreviousInstance
}
public enum LayerTextAlignment_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V13.PreviousInstance
}
public enum LayerTextDecoration_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V13.PreviousInstance
}
public enum LayerTextVerticalAlignment_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V13.PreviousInstance
}
public enum LightType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V12.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V13.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V13.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V13.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V13.PreviousInstance
}
public enum MediaKey_V13 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V12.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V13.MediaKey, b: StitchSchemaKit.MediaKey_V13.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V13.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V13.PreviousInstance
}
public enum MediaObjectId_V13 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V12.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V13.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V13.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V13.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V13.PreviousInstance
}
public enum MobileHapticStyle_V13 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V13.PreviousInstance
}
public enum NetworkRequestType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V13.PreviousInstance
}
public enum PathPoint_V13 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V12.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V13.PathPoint, b: StitchSchemaKit.PathPoint_V13.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V13.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V12.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V13.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V13.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V13.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V13.PreviousInstance
}
public enum Point3D_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V12.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V13.Point3D, b: StitchSchemaKit.Point3D_V13.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V13.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V13 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V12.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V13.Point4D, b: StitchSchemaKit.Point4D_V13.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V13.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V13 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V12.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V13.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V13.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V13.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V13.PreviousInstance
}
public enum RGBA_V13 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V12.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V13.RGBA, b: StitchSchemaKit.RGBA_V13.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V13.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V13 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V12.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V13.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V13.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V13.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V13.PreviousInstance
}
public enum ScrollJumpStyle_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V13.PreviousInstance
}
public enum ScrollMode_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V12.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V13.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V13.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V13.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V13.PreviousInstance
}
public enum ShapeAndRect_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V12.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V13.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V13.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V13.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V13.PreviousInstance
}
public enum ShapeCommand_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V12.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V13.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V13.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V13.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V13.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V13.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V13 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V13.PreviousInstance
}
public enum SidebarLayerData_V13 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V12.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V13.PreviousInstance
}
public enum StitchCameraOrientation_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V13.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V13.PreviousInstance
}
public enum StitchDeviceOrientation_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V13.PreviousInstance
}
public enum StitchFontChoice_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V13.PreviousInstance
}
public enum StitchFontWeight_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V13.PreviousInstance
}
public enum StitchFont_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V12.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V13.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V13.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V13.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V13.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V13.StitchFont, b: StitchSchemaKit.StitchFont_V13.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V13.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V13.PreviousInstance
}
public enum StitchJSON_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V12.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V13.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V13.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V13.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V12.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V13.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V13.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V13.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V13.PreviousInstance
}
public enum StitchOrientation_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V12.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V13.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V13.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V13.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V13.PreviousInstance
}
public enum StrokeLineCap_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap
  public enum StrokeLineCap : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case butt, square, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineCap_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineCap_V13.PreviousInstance
}
public enum StrokeLineJoin_V13 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin
  public enum StrokeLineJoin : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case bevel, miter, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineJoin_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineJoin_V13.PreviousInstance
}
public enum TextTransform_V13 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V12.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V13.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V13.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V13.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V13.PreviousInstance
}
public enum TriangleData_V13 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V12.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V13.TriangleData, b: StitchSchemaKit.TriangleData_V13.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V13.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V13.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V13 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V13.PreviousInstance
}
public enum PreviewSize_V13 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V12.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V13.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V13.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V13.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V13.PreviousInstance
}
public enum SplitterType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V12.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V13.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V13.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V13.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V13.PreviousInstance
}
public enum UserVisibleType_V13 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V12.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case strokeLineCap
    case strokeLineJoin
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V13.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V13.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V13.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V13.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V13.PreviousInstance
}
public enum CommentBoxData_V14 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V13.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V14.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V14.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V14.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V13.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V14.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V14.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V14.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V14.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V14.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V14.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V14.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V14.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V14.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V14.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V14.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V14.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V14.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V14.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V14.StitchDocument, b: StitchSchemaKit.StitchDocument_V14.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V14.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V14.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V14.PreviousInstance)
}
public enum ExpansionDirection_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V13.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V14.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V14.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V14.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V13.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol, videoStreaming
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V14.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V14.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V14.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V14.PreviousInstance
}
public enum GroupNodeID_V14 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V14.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V14.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V14.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V14.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V14 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V13.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V14.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V14.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V14.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V14.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V14.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V14.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V13.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V14
  public typealias Layer = StitchSchemaKit.Layer_V14.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V14.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V14.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var videoURLPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public var volumePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V14.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, videoURLPort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, volumePort: StitchSchemaKit.LayerNodeEntity_V14.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V14.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V14.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V14.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V13.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V14.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V14.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V14.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V14.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V14.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V14.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V14.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V14.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V14.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V14.NodeEntity, b: StitchSchemaKit.NodeEntity_V14.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V14.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V13.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V14.NodeKind, b: StitchSchemaKit.NodeKind_V14.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V14.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V14.PreviousInstance
}
public enum PatchNodeEntity_V14 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V13.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V14.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V14.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V14.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V14.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V14.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V14.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V14.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V14.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V14.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V14.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V14.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V14.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V13.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case strokeLineCap
    case strokeLineJoin
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    case videoURL
    case volume
    public static func == (a: StitchSchemaKit.LayerInputType_V14.LayerInputType, b: StitchSchemaKit.LayerInputType_V14.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V14.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V13.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V14.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V14.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V14.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V14.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V14.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V14.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V14.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V14.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V14.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V13.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V14.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V14.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V14.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V14.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V14.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V14.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V14.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V14.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V14.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V14.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V14.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V14.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V14.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V14.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V14.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V14.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V13.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V14.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V14.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V14.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V14.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V14.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V14.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V14 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V13.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V14.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V14.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V14.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V14.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V14.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V14.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V14.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V14.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V14.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V14.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V14.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V14.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V14.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V14.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V14.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V14.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V14.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V14.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V14.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle
  public typealias StrokeLineCap = StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap
  public typealias StrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V14.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V14.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V14.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V14.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V14.Point3D)
    case point4D(StitchSchemaKit.PortValue_V14.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V14.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V14.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V14.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V14.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V14.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V14.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V14.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V14.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V14.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V14.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V14.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V14.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V14.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V14.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V14.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V14.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V14.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V14.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V14.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V14.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V14.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V14.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V14.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V14.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V14.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V14.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V14.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V14.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V14.MobileHapticStyle)
    case strokeLineCap(StitchSchemaKit.PortValue_V14.StrokeLineCap)
    case strokeLineJoin(StitchSchemaKit.PortValue_V14.StrokeLineJoin)
    public static func == (a: StitchSchemaKit.PortValue_V14.PortValue, b: StitchSchemaKit.PortValue_V14.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V14.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V14.PreviousInstance
}
public enum Patch_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V13.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V14.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V14.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V14.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V14.PreviousInstance
}
public enum Anchoring_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V13.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V14.Anchoring, b: StitchSchemaKit.Anchoring_V14.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V14.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V14.PreviousInstance
}
public enum AsyncMediaValue_V14 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V13.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V14.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V14.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V14.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V14.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V14.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V14.PreviousInstance
}
public enum CameraDirection_V14 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V13.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V14.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V14.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V14.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V14.PreviousInstance
}
public enum CameraSettings_V14 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V13.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V14.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V14.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V14.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V14.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V14.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V14.CameraSettings, b: StitchSchemaKit.CameraSettings_V14.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V14.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V14.PreviousInstance
}
public enum CustomShape_V14 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V13.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V14.CustomShape, b: StitchSchemaKit.CustomShape_V14.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V14.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V14.PreviousInstance
}
public enum DataType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V13.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V14.DataType<Value>, b: StitchSchemaKit.DataType_V14.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V14.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V12.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V12.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V14 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V14.PreviousInstance
}
public enum DelayStyle_V14 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V13.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V14.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V14.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V14.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V14.PreviousInstance
}
public enum JSONCurveTo_V14 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V13.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V14.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V14.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V14.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V14 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V13.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V14.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V14.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V14.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V14.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V14.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V14 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V13.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V14.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V13.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V14.LayerDimension, b: StitchSchemaKit.LayerDimension_V14.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V14.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V13.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V14.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V14.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V14.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V13.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V14.LayerSize, b: StitchSchemaKit.LayerSize_V14.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V14.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V13.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V14.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V14.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V14.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V14.PreviousInstance
}
public enum LayerTextAlignment_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V14.PreviousInstance
}
public enum LayerTextDecoration_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V14.PreviousInstance
}
public enum LayerTextVerticalAlignment_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V14.PreviousInstance
}
public enum LightType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V13.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V14.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V14.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V14.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V14.PreviousInstance
}
public enum MediaKey_V14 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V13.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V14.MediaKey, b: StitchSchemaKit.MediaKey_V14.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V14.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V14.PreviousInstance
}
public enum MediaObjectId_V14 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V13.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V14.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V14.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V14.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V14.PreviousInstance
}
public enum MobileHapticStyle_V14 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V14.PreviousInstance
}
public enum NetworkRequestType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V14.PreviousInstance
}
public enum PathPoint_V14 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V13.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V14.PathPoint, b: StitchSchemaKit.PathPoint_V14.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V14.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V13.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V14.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V14.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V14.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V14.PreviousInstance
}
public enum Point3D_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V13.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V14.Point3D, b: StitchSchemaKit.Point3D_V14.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V14.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V14 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V13.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V14.Point4D, b: StitchSchemaKit.Point4D_V14.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V14.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V14 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V13.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V14.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V14.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V14.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V14.PreviousInstance
}
public enum RGBA_V14 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V13.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V14.RGBA, b: StitchSchemaKit.RGBA_V14.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V14.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V14 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V13.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V14.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V14.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V14.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V14.PreviousInstance
}
public enum ScrollJumpStyle_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V14.PreviousInstance
}
public enum ScrollMode_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V13.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V14.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V14.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V14.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V14.PreviousInstance
}
public enum ShapeAndRect_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V13.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V14.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V14.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V14.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V14.PreviousInstance
}
public enum ShapeCommand_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V13.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V14.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V14.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V14.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V14.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V14.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V14 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V14.PreviousInstance
}
public enum SidebarLayerData_V14 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V13.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V14.PreviousInstance
}
public enum StitchCameraOrientation_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V14.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V14.PreviousInstance
}
public enum StitchDeviceOrientation_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V14.PreviousInstance
}
public enum StitchFontChoice_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V14.PreviousInstance
}
public enum StitchFontWeight_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V14.PreviousInstance
}
public enum StitchFont_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V13.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V14.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V14.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V14.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V14.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V14.StitchFont, b: StitchSchemaKit.StitchFont_V14.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V14.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V14.PreviousInstance
}
public enum StitchJSON_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V13.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V14.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V14.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V14.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V13.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V14.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V14.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V14.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V14.PreviousInstance
}
public enum StitchOrientation_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V13.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V14.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V14.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V14.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V14.PreviousInstance
}
public enum StrokeLineCap_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap
  public enum StrokeLineCap : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case butt, square, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineCap_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineCap_V14.PreviousInstance
}
public enum StrokeLineJoin_V14 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin
  public enum StrokeLineJoin : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case bevel, miter, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineJoin_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineJoin_V14.PreviousInstance
}
public enum TextTransform_V14 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V13.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V14.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V14.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V14.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V14.PreviousInstance
}
public enum TriangleData_V14 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V13.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V14.TriangleData, b: StitchSchemaKit.TriangleData_V14.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V14.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V14.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V14 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V14.PreviousInstance
}
public enum PreviewSize_V14 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V13.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V14.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V14.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V14.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V14.PreviousInstance
}
public enum SplitterType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V13.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V14.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V14.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V14.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V14.PreviousInstance
}
public enum UserVisibleType_V14 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V13.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case strokeLineCap
    case strokeLineJoin
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V14.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V14.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V14.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V14.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V14.PreviousInstance
}
public enum CommentBoxData_V15 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V14.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V15.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V15.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V15.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V14.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V15.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V15.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V15.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V15.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V15.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V15.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V15.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V15.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V15.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V15.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V15.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V15.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V15.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V15.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V15.StitchDocument, b: StitchSchemaKit.StitchDocument_V15.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V15.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V15.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V15.PreviousInstance)
}
public enum ExpansionDirection_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V14.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V15.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V15.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V15.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V14.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol, videoStreaming
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V15.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V15.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V15.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V15.PreviousInstance
}
public enum GroupNodeID_V15 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V15.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V15.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V15.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V15.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V15 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V14.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V15.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V15.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V15.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V15.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V15.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V15.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V14.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V15
  public typealias Layer = StitchSchemaKit.Layer_V15.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V15.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V15.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var videoURLPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public var volumePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V15.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, videoURLPort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, volumePort: StitchSchemaKit.LayerNodeEntity_V15.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V15.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V15.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V15.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V14.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V15.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V15.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V15.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V15.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V15.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V15.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V15.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V15.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V15.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V15.NodeEntity, b: StitchSchemaKit.NodeEntity_V15.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V15.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V14.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V15.NodeKind, b: StitchSchemaKit.NodeKind_V15.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V15.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V15.PreviousInstance
}
public enum PatchNodeEntity_V15 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V14.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V15.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V15.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V15.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V15.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V15.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V15.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V15.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V15.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V15.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V15.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V15.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V15.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V14.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case strokeLineCap
    case strokeLineJoin
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    case videoURL
    case volume
    public static func == (a: StitchSchemaKit.LayerInputType_V15.LayerInputType, b: StitchSchemaKit.LayerInputType_V15.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V15.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V14.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V15.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V15.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V15.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V15.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V15.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V15.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V15.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V15.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V15.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V14.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V15.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V15.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V15.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V15.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V15.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V15.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V15.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V15.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V15.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V15.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V15.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V15.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V15.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V15.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V15.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V15.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V14.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V15.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V15.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V15.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V15.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V15.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V15.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V15 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V14.PortValue
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V15.StitchStringValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V15.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V15.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V15.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V15.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V15.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V15.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V15.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V15.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V15.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V15.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V15.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V15.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V15.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V15.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V15.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V15.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V15.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V15.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V15.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle
  public typealias StrokeLineCap = StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap
  public typealias StrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(StitchSchemaKit.PortValue_V15.StitchStringValue)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V15.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V15.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V15.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V15.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V15.Point3D)
    case point4D(StitchSchemaKit.PortValue_V15.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V15.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V15.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V15.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V15.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V15.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V15.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V15.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V15.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V15.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V15.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V15.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V15.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V15.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V15.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V15.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V15.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V15.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V15.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V15.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V15.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V15.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V15.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V15.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V15.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V15.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V15.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V15.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V15.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V15.MobileHapticStyle)
    case strokeLineCap(StitchSchemaKit.PortValue_V15.StrokeLineCap)
    case strokeLineJoin(StitchSchemaKit.PortValue_V15.StrokeLineJoin)
    public static func == (a: StitchSchemaKit.PortValue_V15.PortValue, b: StitchSchemaKit.PortValue_V15.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V15.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V15.PreviousInstance
}
public enum Patch_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V14.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V15.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V15.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V15.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V15.PreviousInstance
}
public enum Anchoring_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V14.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V15.Anchoring, b: StitchSchemaKit.Anchoring_V15.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V15.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V15.PreviousInstance
}
public enum AsyncMediaValue_V15 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V14.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V15.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V15.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V15.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V15.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V15.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V15.PreviousInstance
}
public enum CameraDirection_V15 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V14.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V15.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V15.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V15.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V15.PreviousInstance
}
public enum CameraSettings_V15 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V14.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V15.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V15.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V15.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V15.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V15.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V15.CameraSettings, b: StitchSchemaKit.CameraSettings_V15.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V15.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V15.PreviousInstance
}
public enum CustomShape_V15 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V14.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V15.CustomShape, b: StitchSchemaKit.CustomShape_V15.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V15.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V15.PreviousInstance
}
public enum DataType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V14.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V15.DataType<Value>, b: StitchSchemaKit.DataType_V15.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V15.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V13.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V13.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V15 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V15.PreviousInstance
}
public enum DelayStyle_V15 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V14.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V15.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V15.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V15.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V15.PreviousInstance
}
public enum JSONCurveTo_V15 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V14.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V15.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V15.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V15.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V15 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V14.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V15.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V15.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V15.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V15.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V15.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V15 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V14.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V15.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V14.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V15.LayerDimension, b: StitchSchemaKit.LayerDimension_V15.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V15.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V14.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V15.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V15.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V15.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V14.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V15.LayerSize, b: StitchSchemaKit.LayerSize_V15.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V15.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V14.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V15.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V15.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V15.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V15.PreviousInstance
}
public enum LayerTextAlignment_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V15.PreviousInstance
}
public enum LayerTextDecoration_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V15.PreviousInstance
}
public enum LayerTextVerticalAlignment_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V15.PreviousInstance
}
public enum LightType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V14.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V15.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V15.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V15.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V15.PreviousInstance
}
public enum MediaKey_V15 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V14.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V15.MediaKey, b: StitchSchemaKit.MediaKey_V15.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V15.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V15.PreviousInstance
}
public enum MediaObjectId_V15 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V14.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V15.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V15.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V15.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V15.PreviousInstance
}
public enum MobileHapticStyle_V15 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V15.PreviousInstance
}
public enum NetworkRequestType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V15.PreviousInstance
}
public enum PathPoint_V15 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V14.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V15.PathPoint, b: StitchSchemaKit.PathPoint_V15.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V15.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V14.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V15.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V15.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V15.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V15.PreviousInstance
}
public enum Point3D_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V14.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V15.Point3D, b: StitchSchemaKit.Point3D_V15.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V15.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V15 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V14.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V15.Point4D, b: StitchSchemaKit.Point4D_V15.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V15.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V15 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V14.PortValueComparable
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V15.StitchStringValue
  public enum PortValueComparable : Swift.Equatable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(StitchSchemaKit.PortValueComparable_V15.StitchStringValue)
    public static func == (a: StitchSchemaKit.PortValueComparable_V15.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V15.PortValueComparable) -> Swift.Bool
  }
}
extension StitchSchemaKit.PortValueComparable_V15.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V15.PreviousInstance
}
public enum RGBA_V15 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V14.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V15.RGBA, b: StitchSchemaKit.RGBA_V15.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V15.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V15 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V14.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V15.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V15.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V15.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V15.PreviousInstance
}
public enum ScrollJumpStyle_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V15.PreviousInstance
}
public enum ScrollMode_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V14.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V15.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V15.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V15.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V15.PreviousInstance
}
public enum ShapeAndRect_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V14.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V15.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V15.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V15.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V15.PreviousInstance
}
public enum ShapeCommand_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V14.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V15.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V15.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V15.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V15.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V15.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V15 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V15.PreviousInstance
}
public enum SidebarLayerData_V15 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V14.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V15.PreviousInstance
}
public enum StitchCameraOrientation_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V15.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V15.PreviousInstance
}
public enum StitchDeviceOrientation_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V15.PreviousInstance
}
public enum StitchFontChoice_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V15.PreviousInstance
}
public enum StitchFontWeight_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V15.PreviousInstance
}
public enum StitchFont_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V14.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V15.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V15.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V15.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V15.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V15.StitchFont, b: StitchSchemaKit.StitchFont_V15.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V15.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V15.PreviousInstance
}
public enum StitchJSON_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V14.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V15.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V15.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V15.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V14.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V15.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V15.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V15.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V15.PreviousInstance
}
public enum StitchOrientation_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V14.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V15.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V15.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V15.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V15.PreviousInstance
}
public enum StitchStringValue_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StitchStringValue_V15.StitchStringValue
  public struct StitchStringValue : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let string: Swift.String
    public var isLargeString: Swift.Bool
    public init(_ string: Swift.String, isLargeString: Swift.Bool = false)
    public static func == (lhs: StitchSchemaKit.StitchStringValue_V15.StitchStringValue, rhs: StitchSchemaKit.StitchStringValue_V15.StitchStringValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchStringValue_V15.StitchStringValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchStringValue_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchStringValue_V15.PreviousInstance
}
public enum StrokeLineCap_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap
  public enum StrokeLineCap : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case butt, square, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineCap_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineCap_V15.PreviousInstance
}
public enum StrokeLineJoin_V15 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin
  public enum StrokeLineJoin : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case bevel, miter, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineJoin_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineJoin_V15.PreviousInstance
}
public enum TextTransform_V15 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V14.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V15.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V15.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V15.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V15.PreviousInstance
}
public enum TriangleData_V15 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V14.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V15.TriangleData, b: StitchSchemaKit.TriangleData_V15.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V15.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V15.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V15 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V15.PreviousInstance
}
public enum PreviewSize_V15 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V14.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V15.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V15.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V15.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V15.PreviousInstance
}
public enum SplitterType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V14.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V15.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V15.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V15.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V15.PreviousInstance
}
public enum UserVisibleType_V15 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V14.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case strokeLineCap
    case strokeLineJoin
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V15.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V15.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V15.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V15.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V15.PreviousInstance
}
public enum CommentBoxData_V16 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V15.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V16.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V16.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V16.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V15.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V16.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V16.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V16.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V16.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V16.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V16.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V16.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V16.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V16.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V16.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V16.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V16.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V16.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V16.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V16.StitchDocument, b: StitchSchemaKit.StitchDocument_V16.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V16.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V16.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V16.PreviousInstance)
}
public enum ExpansionDirection_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V15.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V16.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V16.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V16.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V15.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol, videoStreaming
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V16.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V16.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V16.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V16.PreviousInstance
}
public enum GroupNodeID_V16 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V16.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V16.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V16.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V16.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V16 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V15.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V16.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V16.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V16.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V16.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V16.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V16.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V15.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V16
  public typealias Layer = StitchSchemaKit.Layer_V16.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V16.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V16.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var videoURLPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var volumePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var spacingBetweenGridColumnsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var spacingBetweenGridRowsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public var itemAlignmentWithinGridCellPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V16.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, videoURLPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, volumePort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, spacingBetweenGridColumnsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, spacingBetweenGridRowsPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, itemAlignmentWithinGridCellPort: StitchSchemaKit.LayerNodeEntity_V16.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V16.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V16.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V16.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V15.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V16.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V16.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V16.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V16.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V16.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V16.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V16.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V16.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V16.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V16.NodeEntity, b: StitchSchemaKit.NodeEntity_V16.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V16.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V15.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V16.NodeKind, b: StitchSchemaKit.NodeKind_V16.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V16.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V16.PreviousInstance
}
public enum PatchNodeEntity_V16 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V15.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V16.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V16.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V16.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V16.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V16.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V16.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V16.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V16.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V16.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V16.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V16.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V16.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V15.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case strokeLineCap
    case strokeLineJoin
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    case videoURL
    case volume
    case spacingBetweenGridColumns
    case spacingBetweenGridRows
    case itemAlignmentWithinGridCell
    public static func == (a: StitchSchemaKit.LayerInputType_V16.LayerInputType, b: StitchSchemaKit.LayerInputType_V16.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V16.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V15.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V16.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V16.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V16.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V16.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V16.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V16.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V16.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V16.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V16.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V15.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V16.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V16.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V16.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V16.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V16.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V16.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V16.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V16.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V16.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V16.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V16.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V16.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V16.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V16.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V16.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V16.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V15.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V16.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V16.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V16.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V16.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V16.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V16.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V16 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V15.PortValue
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V16.StitchStringValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V16.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V16.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V16.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V16.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V16.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V16.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V16.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V16.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V16.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V16.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V16.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V16.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V16.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V16.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V16.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V16.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V16.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V16.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V16.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle
  public typealias StrokeLineCap = StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap
  public typealias StrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(StitchSchemaKit.PortValue_V16.StitchStringValue)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V16.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V16.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V16.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V16.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V16.Point3D)
    case point4D(StitchSchemaKit.PortValue_V16.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V16.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V16.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V16.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V16.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V16.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V16.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V16.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V16.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V16.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V16.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V16.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V16.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V16.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V16.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V16.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V16.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V16.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V16.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V16.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V16.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V16.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V16.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V16.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V16.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V16.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V16.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V16.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V16.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V16.MobileHapticStyle)
    case strokeLineCap(StitchSchemaKit.PortValue_V16.StrokeLineCap)
    case strokeLineJoin(StitchSchemaKit.PortValue_V16.StrokeLineJoin)
    public static func == (a: StitchSchemaKit.PortValue_V16.PortValue, b: StitchSchemaKit.PortValue_V16.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V16.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V16.PreviousInstance
}
public enum Patch_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V15.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V16.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V16.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V16.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V16.PreviousInstance
}
public enum Anchoring_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V15.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V16.Anchoring, b: StitchSchemaKit.Anchoring_V16.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V16.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V16.PreviousInstance
}
public enum AsyncMediaValue_V16 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V15.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V16.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V16.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V16.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V16.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V16.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V16.PreviousInstance
}
public enum CameraDirection_V16 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V15.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V16.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V16.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V16.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V16.PreviousInstance
}
public enum CameraSettings_V16 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V15.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V16.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V16.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V16.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V16.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V16.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V16.CameraSettings, b: StitchSchemaKit.CameraSettings_V16.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V16.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V16.PreviousInstance
}
public enum CustomShape_V16 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V15.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V16.CustomShape, b: StitchSchemaKit.CustomShape_V16.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V16.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V16.PreviousInstance
}
public enum DataType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V15.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V16.DataType<Value>, b: StitchSchemaKit.DataType_V16.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V16.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V14.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V14.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V16 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V16.PreviousInstance
}
public enum DelayStyle_V16 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V15.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V16.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V16.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V16.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V16.PreviousInstance
}
public enum JSONCurveTo_V16 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V15.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V16.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V16.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V16.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V16 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V15.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V16.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V16.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V16.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V16.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V16.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V16 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V15.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V16.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V15.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V16.LayerDimension, b: StitchSchemaKit.LayerDimension_V16.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V16.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V15.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V16.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V16.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V16.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V15.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V16.LayerSize, b: StitchSchemaKit.LayerSize_V16.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V16.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V15.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V16.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V16.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V16.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V16.PreviousInstance
}
public enum LayerTextAlignment_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V16.PreviousInstance
}
public enum LayerTextDecoration_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V16.PreviousInstance
}
public enum LayerTextVerticalAlignment_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V16.PreviousInstance
}
public enum LightType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V15.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V16.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V16.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V16.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V16.PreviousInstance
}
public enum MediaKey_V16 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V15.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V16.MediaKey, b: StitchSchemaKit.MediaKey_V16.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V16.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V16.PreviousInstance
}
public enum MediaObjectId_V16 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V15.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V16.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V16.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V16.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V16.PreviousInstance
}
public enum MobileHapticStyle_V16 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V16.PreviousInstance
}
public enum NetworkRequestType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V16.PreviousInstance
}
public enum PathPoint_V16 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V15.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V16.PathPoint, b: StitchSchemaKit.PathPoint_V16.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V16.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V15.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V16.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V16.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V16.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V16.PreviousInstance
}
public enum Point3D_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V15.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V16.Point3D, b: StitchSchemaKit.Point3D_V16.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V16.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V16 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V15.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V16.Point4D, b: StitchSchemaKit.Point4D_V16.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V16.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V16 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V15.PortValueComparable
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V16.StitchStringValue
  public enum PortValueComparable : Swift.Equatable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(StitchSchemaKit.PortValueComparable_V16.StitchStringValue)
    public static func == (a: StitchSchemaKit.PortValueComparable_V16.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V16.PortValueComparable) -> Swift.Bool
  }
}
extension StitchSchemaKit.PortValueComparable_V16.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V16.PreviousInstance
}
public enum RGBA_V16 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V15.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V16.RGBA, b: StitchSchemaKit.RGBA_V16.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V16.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V16 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V15.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V16.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V16.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V16.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V16.PreviousInstance
}
public enum ScrollJumpStyle_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V16.PreviousInstance
}
public enum ScrollMode_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V15.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V16.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V16.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V16.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V16.PreviousInstance
}
public enum ShapeAndRect_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V15.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V16.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V16.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V16.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V16.PreviousInstance
}
public enum ShapeCommand_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V15.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V16.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V16.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V16.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V16.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V16.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V16 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V16.PreviousInstance
}
public enum SidebarLayerData_V16 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V15.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V16.PreviousInstance
}
public enum StitchCameraOrientation_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V16.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V16.PreviousInstance
}
public enum StitchDeviceOrientation_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V16.PreviousInstance
}
public enum StitchFontChoice_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V16.PreviousInstance
}
public enum StitchFontWeight_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V16.PreviousInstance
}
public enum StitchFont_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V15.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V16.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V16.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V16.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V16.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V16.StitchFont, b: StitchSchemaKit.StitchFont_V16.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V16.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V16.PreviousInstance
}
public enum StitchJSON_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V15.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V16.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V16.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V16.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V15.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V16.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V16.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V16.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V16.PreviousInstance
}
public enum StitchOrientation_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V15.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical, grid
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V16.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V16.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V16.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V16.PreviousInstance
}
public enum StitchStringValue_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StitchStringValue_V15.StitchStringValue
  public struct StitchStringValue : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let string: Swift.String
    public var isLargeString: Swift.Bool
    public init(_ string: Swift.String, isLargeString: Swift.Bool = false)
    public static func == (lhs: StitchSchemaKit.StitchStringValue_V16.StitchStringValue, rhs: StitchSchemaKit.StitchStringValue_V16.StitchStringValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchStringValue_V16.StitchStringValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchStringValue_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchStringValue_V16.PreviousInstance
}
public enum StrokeLineCap_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap
  public enum StrokeLineCap : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case butt, square, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineCap_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineCap_V16.PreviousInstance
}
public enum StrokeLineJoin_V16 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin
  public enum StrokeLineJoin : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case bevel, miter, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineJoin_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineJoin_V16.PreviousInstance
}
public enum TextTransform_V16 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V15.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V16.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V16.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V16.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V16.PreviousInstance
}
public enum TriangleData_V16 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V15.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V16.TriangleData, b: StitchSchemaKit.TriangleData_V16.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V16.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V16.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V16 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V16.PreviousInstance
}
public enum PreviewSize_V16 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V15.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V16.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V16.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V16.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V16.PreviousInstance
}
public enum SplitterType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V15.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V16.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V16.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V16.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V16.PreviousInstance
}
public enum UserVisibleType_V16 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V15.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case strokeLineCap
    case strokeLineJoin
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V16.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V16.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V16.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V16.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V16.PreviousInstance
}
public enum CommentBoxData_V17 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V16.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V17.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V17.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V17.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V16.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V17.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V17.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V17.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V17.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V17.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V17.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V17.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V17.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V17.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V17.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V17.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V17.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V17.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V17.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V17.StitchDocument, b: StitchSchemaKit.StitchDocument_V17.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V17.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V17.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V17.PreviousInstance)
}
public enum ExpansionDirection_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V16.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V17.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V17.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V17.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V16.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient, radialGradient, angularGradient, sfSymbol, videoStreaming
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V17.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V17.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V17.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V17.PreviousInstance
}
public enum GroupNodeID_V17 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V17.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V17.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V17.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V17.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V17 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V16.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V17.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V17.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V17.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V17.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V17.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V17.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V16.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V17
  public typealias Layer = StitchSchemaKit.Layer_V17.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V17.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V17.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var startAnglePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var endAnglePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var startRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var endRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var shadowColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var videoURLPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var volumePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var spacingBetweenGridColumnsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var spacingBetweenGridRowsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public var itemAlignmentWithinGridCellPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V17.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, sizePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, scalePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, anchoringPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, opacityPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, zIndexPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, masksPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, colorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, rotationXPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, rotationYPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, rotationZPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, lineColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, lineWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, blurPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, blendModePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, brightnessPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, colorInvertPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, contrastPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, hueRotationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, saturationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, pivotPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, enabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, isClippedPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, orientationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, paddingPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, setupModePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, shapePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokePositionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeStartPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeEndPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeLineCapPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, strokeLineJoinPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, textPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, fontSizePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, textDecorationPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, textFontPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, imagePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, videoPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, fitStylePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, clippedPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, progressPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, model3DPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, mapTypePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, mapSpanPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, startColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, endColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, startAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, endAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, centerAnchorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, startAnglePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, endAnglePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, startRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, endRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, shadowColorPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, shadowOpacityPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, shadowRadiusPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, shadowOffsetPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, sfSymbolPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, videoURLPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, volumePort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, spacingBetweenGridColumnsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, spacingBetweenGridRowsPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, itemAlignmentWithinGridCellPort: StitchSchemaKit.LayerNodeEntity_V17.NodeConnectionType, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V17.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V17.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V17.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V16.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V17.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V17.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V17.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V17.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V17.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V17.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V17.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V17.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V17.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V17.NodeEntity, b: StitchSchemaKit.NodeEntity_V17.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V17.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V16.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V17.NodeKind, b: StitchSchemaKit.NodeKind_V17.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V17.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V17.PreviousInstance
}
public enum PatchNodeEntity_V17 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V16.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V17.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V17.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V17.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V17.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V17.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V17.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V17.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V17.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V17.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V17.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V17.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V17.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V16.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case strokeLineCap
    case strokeLineJoin
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    case centerAnchor
    case startAngle
    case endAngle
    case startRadius
    case endRadius
    case shadowColor
    case shadowOpacity
    case shadowRadius
    case shadowOffset
    case sfSymbol
    case videoURL
    case volume
    case spacingBetweenGridColumns
    case spacingBetweenGridRows
    case itemAlignmentWithinGridCell
    public static func == (a: StitchSchemaKit.LayerInputType_V17.LayerInputType, b: StitchSchemaKit.LayerInputType_V17.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V17.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V16.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V17.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V17.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V17.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V17.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V17.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V17.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V17.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V17.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V17.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V17.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V17.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V17.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V16.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V17.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V17.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V17.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V17.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V17.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V17.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V17.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V17.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V17.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V17.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V17.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V17.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V17.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V17.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V17.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V17.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V17.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V16.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V17.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V17.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V17.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V17.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V17.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V17.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V17.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V17 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V16.PortValue
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V17.StitchStringValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V17.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V17.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V17.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V17.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V17.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V17.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V17.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V17.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V17.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V17.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V17.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V17.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V17.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V17.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V17.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V17.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V17.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V17.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V17.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle
  public typealias StrokeLineCap = StitchSchemaKit.StrokeLineCap_V17.StrokeLineCap
  public typealias StrokeLineJoin = StitchSchemaKit.StrokeLineJoin_V17.StrokeLineJoin
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(StitchSchemaKit.PortValue_V17.StitchStringValue)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V17.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V17.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V17.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V17.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V17.Point3D)
    case point4D(StitchSchemaKit.PortValue_V17.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V17.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V17.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V17.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V17.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V17.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V17.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V17.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V17.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V17.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V17.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V17.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V17.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V17.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V17.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V17.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V17.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V17.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V17.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V17.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V17.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V17.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V17.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V17.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V17.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V17.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V17.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V17.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V17.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V17.MobileHapticStyle)
    case strokeLineCap(StitchSchemaKit.PortValue_V17.StrokeLineCap)
    case strokeLineJoin(StitchSchemaKit.PortValue_V17.StrokeLineJoin)
    public static func == (a: StitchSchemaKit.PortValue_V17.PortValue, b: StitchSchemaKit.PortValue_V17.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V17.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V17.PreviousInstance
}
public enum Patch_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V16.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V17.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V17.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V17.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V17.PreviousInstance
}
public enum Anchoring_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V16.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V17.Anchoring, b: StitchSchemaKit.Anchoring_V17.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V17.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V17.PreviousInstance
}
public enum AsyncMediaValue_V17 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V16.AsyncMediaValue
  public struct AsyncMediaValue : Swift.Equatable {
    public typealias MediaKey = StitchSchemaKit.MediaKey_V17.MediaKey
    public static func == (lhs: StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue, rhs: StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue) -> Swift.Bool
    public var id: Foundation.UUID
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue.MediaKey>
    public var _mediaObject: Any?
    public init(id: Foundation.UUID, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue.MediaKey>, _mediaObject: Any?)
  }
}
extension StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encoder(to encoder: any Swift.Encoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension StitchSchemaKit.AsyncMediaValue_V17.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V17.PreviousInstance
}
public enum CameraDirection_V17 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V16.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V17.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V17.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V17.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V17.PreviousInstance
}
public enum CameraSettings_V17 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V16.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V17.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V17.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V17.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V17.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V17.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V17.CameraSettings, b: StitchSchemaKit.CameraSettings_V17.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V17.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V17.PreviousInstance
}
public enum CustomShape_V17 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V16.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V17.CustomShape, b: StitchSchemaKit.CustomShape_V17.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V17.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V17.PreviousInstance
}
public enum DataType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V16.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V17.DataType<Value>, b: StitchSchemaKit.DataType_V17.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V17.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V15.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V15.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V17 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V17.PreviousInstance
}
public enum DelayStyle_V17 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V16.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V17.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V17.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V17.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V17.PreviousInstance
}
public enum JSONCurveTo_V17 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V16.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V17.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V17.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V17.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V17 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V16.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V17.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V17.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V17.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V17.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V17.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V17 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V16.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V17.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V16.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V17.LayerDimension, b: StitchSchemaKit.LayerDimension_V17.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V17.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V16.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V17.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V17.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V17.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V16.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V17.LayerSize, b: StitchSchemaKit.LayerSize_V17.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V17.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V16.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V17.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V17.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V17.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V17.PreviousInstance
}
public enum LayerTextAlignment_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V17.PreviousInstance
}
public enum LayerTextDecoration_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V17.PreviousInstance
}
public enum LayerTextVerticalAlignment_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V17.PreviousInstance
}
public enum LightType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V16.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V17.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V17.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V17.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V17.PreviousInstance
}
public enum MediaKey_V17 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V16.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V17.MediaKey, b: StitchSchemaKit.MediaKey_V17.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V17.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V17.PreviousInstance
}
public enum MobileHapticStyle_V17 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V17.PreviousInstance
}
public enum NetworkRequestType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V17.PreviousInstance
}
public enum PathPoint_V17 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V16.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V17.PathPoint, b: StitchSchemaKit.PathPoint_V17.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V17.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V16.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V17.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V17.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V17.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V17.PreviousInstance
}
public enum Point3D_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V16.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V17.Point3D, b: StitchSchemaKit.Point3D_V17.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V17.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V17 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V16.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V17.Point4D, b: StitchSchemaKit.Point4D_V17.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V17.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V17 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V16.PortValueComparable
  public typealias StitchStringValue = StitchSchemaKit.StitchStringValue_V17.StitchStringValue
  public enum PortValueComparable : Swift.Equatable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(StitchSchemaKit.PortValueComparable_V17.StitchStringValue)
    public static func == (a: StitchSchemaKit.PortValueComparable_V17.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V17.PortValueComparable) -> Swift.Bool
  }
}
extension StitchSchemaKit.PortValueComparable_V17.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V17.PreviousInstance
}
public enum RGBA_V17 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V16.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V17.RGBA, b: StitchSchemaKit.RGBA_V17.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V17.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V17 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V16.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V17.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V17.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V17.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V17.PreviousInstance
}
public enum ScrollJumpStyle_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V17.PreviousInstance
}
public enum ScrollMode_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V16.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V17.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V17.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V17.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V17.PreviousInstance
}
public enum ShapeAndRect_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V16.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V17.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V17.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V17.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V17.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V17.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V17.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V17.PreviousInstance
}
public enum ShapeCommand_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V16.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V17.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V17.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V17.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V17.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V17.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V17 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V17.PreviousInstance
}
public enum SidebarLayerData_V17 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V16.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V17.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V17.PreviousInstance
}
public enum StitchCameraOrientation_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V17.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V17.PreviousInstance
}
public enum StitchDeviceOrientation_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V17.PreviousInstance
}
public enum StitchFontChoice_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V17.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V17.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V17.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V17.PreviousInstance
}
public enum StitchFontWeight_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V17.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V17.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V17.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V17.PreviousInstance
}
public enum StitchFont_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V16.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V17.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V17.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V17.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V17.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V17.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V17.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V17.StitchFont, b: StitchSchemaKit.StitchFont_V17.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V17.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V17.PreviousInstance
}
public enum StitchJSON_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V16.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V17.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V17.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V17.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V16.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V17.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V17.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V17.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V17.PreviousInstance
}
public enum StitchOrientation_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V16.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical, grid
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V17.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V17.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V17.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V17.PreviousInstance
}
public enum StitchStringValue_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StitchStringValue_V16.StitchStringValue
  public struct StitchStringValue : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let string: Swift.String
    public var isLargeString: Swift.Bool
    public init(_ string: Swift.String, isLargeString: Swift.Bool = false)
    public static func == (lhs: StitchSchemaKit.StitchStringValue_V17.StitchStringValue, rhs: StitchSchemaKit.StitchStringValue_V17.StitchStringValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchStringValue_V17.StitchStringValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchStringValue_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchStringValue_V17.PreviousInstance
}
public enum StrokeLineCap_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap
  public enum StrokeLineCap : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case butt, square, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineCap_V17.StrokeLineCap]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineCap_V17.StrokeLineCap] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineCap_V17.StrokeLineCap : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineCap_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineCap_V17.PreviousInstance
}
public enum StrokeLineJoin_V17 {
  public typealias PreviousInstance = StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin
  public enum StrokeLineJoin : Swift.String, Swift.Hashable, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case bevel, miter, round
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StrokeLineJoin_V17.StrokeLineJoin]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StrokeLineJoin_V17.StrokeLineJoin] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StrokeLineJoin_V17.StrokeLineJoin : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StrokeLineJoin_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StrokeLineJoin_V17.PreviousInstance
}
public enum TextTransform_V17 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V16.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V17.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V17.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V17.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V17.PreviousInstance
}
public enum TriangleData_V17 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V16.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V17.TriangleData, b: StitchSchemaKit.TriangleData_V17.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V17.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V17.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V17 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V17.PreviousInstance
}
public enum PreviewSize_V17 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V16.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V17.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V17.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V17.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V17.PreviousInstance
}
public enum SplitterType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V16.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V17.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V17.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V17.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V17.PreviousInstance
}
public enum UserVisibleType_V17 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V16.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case strokeLineCap
    case strokeLineJoin
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V17.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V17.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V17.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V17.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V17.PreviousInstance
}
public enum CommentBoxData_V2 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V1.CommentBoxData
  public typealias CommentExpansionBox = StitchSchemaKit.CommentExpansionBox_V2.CommentExpansionBox
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.CommentBoxId
    public var groupId: StitchSchemaKit.GroupNodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGSize
    public var previousPosition: CoreFoundation.CGSize
    public var expansionBox: StitchSchemaKit.CommentBoxData_V2.CommentExpansionBox
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.GroupNodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGSize = .zero, previousPosition: CoreFoundation.CGSize = .zero, expansionBox: StitchSchemaKit.CommentBoxData_V2.CommentExpansionBox, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V2.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V2.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V2.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CommentExpansionBox_V2 {
  public typealias PreviousInstance = StitchSchemaKit.CommentExpansionBox_V1.CommentExpansionBox
  public typealias ExpansionDirection = StitchSchemaKit.ExpansionDirection_V2.ExpansionDirection
  public struct CommentExpansionBox : Swift.Equatable, Swift.Hashable {
    public var nodes: StitchSchemaKit.NodeIdSet
    public var expansionDirection: StitchSchemaKit.CommentExpansionBox_V2.ExpansionDirection?
    public var size: CoreFoundation.CGSize
    public var previousSize: CoreFoundation.CGSize
    public var startPoint: CoreFoundation.CGPoint
    public var endPoint: CoreFoundation.CGPoint
    public var anchorCorner: CoreFoundation.CGPoint
    public init(nodes: StitchSchemaKit.NodeIdSet = .init(), expansionDirection: StitchSchemaKit.CommentExpansionBox_V2.ExpansionDirection? = nil, size: CoreFoundation.CGSize, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, anchorCorner: CoreFoundation.CGPoint? = nil)
    public static func == (a: StitchSchemaKit.CommentExpansionBox_V2.CommentExpansionBox, b: StitchSchemaKit.CommentExpansionBox_V2.CommentExpansionBox) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentExpansionBox_V2.CommentExpansionBox : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentExpansionBox_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentExpansionBox_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V1.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V2.NodeEntity]
  public typealias CommentBoxesDict = [StitchSchemaKit.CommentBoxId : StitchSchemaKit.CommentBoxData_V2.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V2.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V2.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V2.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V2.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V2.SidebarLayerDataList
    public let commentBoxesDict: StitchSchemaKit.StitchDocument_V2.CommentBoxesDict
    public let cameraSettings: StitchSchemaKit.StitchDocument_V2.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V2.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V2.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V2.SidebarLayerDataList, commentBoxesDict: StitchSchemaKit.StitchDocument_V2.CommentBoxesDict, cameraSettings: StitchSchemaKit.StitchDocument_V2.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V2.StitchDocument, b: StitchSchemaKit.StitchDocument_V2.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V2.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V2.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V2.PreviousInstance)
}
public enum ExpansionDirection_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V1.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V2.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V2.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V2.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InteractionType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.InteractionType_V1.InteractionType
  public enum InteractionType : Swift.String, Swift.Equatable {
    case drag, press, scroll
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.InteractionType_V2.InteractionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.InteractionType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.InteractionType_V2.PreviousInstance
}
public enum Layer_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V1.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V2.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V2.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V2.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V2.PreviousInstance
}
public enum GroupNodeID_V2 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V2.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V2.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V2.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V2.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V2 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V1.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V2.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V2.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V2.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V2.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V2.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V2.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V1.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V2
  public typealias Layer = StitchSchemaKit.Layer_V2.Layer
  public typealias InteractionsDict = [StitchSchemaKit.InteractionType_V1.InteractionType : StitchSchemaKit.NodeIdSet]
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V2.Layer
    public let interactionsDict: StitchSchemaKit.LayerNodeEntity_V2.InteractionsDict
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V2.Layer, interactionsDict: StitchSchemaKit.LayerNodeEntity_V2.InteractionsDict, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V2.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V2.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V2.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V2 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V1.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V2.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V2.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V2.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V2.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V2.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V2.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V2.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V2.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V2.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V2.NodeEntity, b: StitchSchemaKit.NodeEntity_V2.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V2.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V2 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V1.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V2.NodeKind, b: StitchSchemaKit.NodeKind_V2.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V2.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V2.PreviousInstance
}
public enum PatchNodeEntity_V2 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V1.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V2.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V2.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V2.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V2.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V2.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V2.SplitterNodeEntitySchema?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V2.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V2.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V2.SplitterNodeEntitySchema?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V2.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V2.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V2.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V2 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V1.NodeIOCoordinate
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portId: Swift.Int
    public var nodeId: StitchSchemaKit.NodeId
    public init(portId: Swift.Int, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V2.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V2.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V2.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V2 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V1.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V2.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V2.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V2.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V2.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodePortInputEntity_V2.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V2.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V2.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V2.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V2.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V2.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V2.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V2.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V2.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V2.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V2.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V2.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V2.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V2 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V1.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V2.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V2.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V2.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V2.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V2.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V2.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V2.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V2.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V2.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V2.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V2.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V2.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V2.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V2.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V2.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V2.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V2.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V2.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V2.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V2.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V2.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V2.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V2.Point3D)
    case point4D(StitchSchemaKit.PortValue_V2.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V2.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V2.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V2.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V2.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V2.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V2.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V2.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V2.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V2.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V2.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V2.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V2.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V2.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V2.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V2.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V2.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V2.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V2.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V2.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V2.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V2.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V2.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V2.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V2.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V2.StitchFont)
    public static func == (a: StitchSchemaKit.PortValue_V2.PortValue, b: StitchSchemaKit.PortValue_V2.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V2.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V2.PreviousInstance
}
public enum Patch_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V1.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V2.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V2.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V2.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V2.PreviousInstance
}
public enum Anchoring_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V1.Anchoring
  public enum Anchoring : Swift.String, Swift.CaseIterable {
    case topLeft, topCenter, topRight, centerLeft, center, centerRight, bottomLeft, bottomCenter, bottomRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Anchoring_V2.Anchoring]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Anchoring_V2.Anchoring] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Anchoring_V2.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V2.PreviousInstance
}
public enum AsyncMediaValue_V2 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V1.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V2.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V2.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V2.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V2.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V2.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V2.PreviousInstance
}
public enum CameraDirection_V2 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V1.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V2.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V2.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V2.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V2.PreviousInstance
}
public enum CameraSettings_V2 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V1.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V2.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V2.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V2.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V2.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V2.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V2.CameraSettings, b: StitchSchemaKit.CameraSettings_V2.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V2.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V2.PreviousInstance
}
public enum CustomShape_V2 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V1.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V2.CustomShape, b: StitchSchemaKit.CustomShape_V2.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V2.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V2.PreviousInstance
}
public enum DataType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V1.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V2.DataType<Value>, b: StitchSchemaKit.DataType_V2.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V2.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V1.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V1.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V2 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V2.PreviousInstance
}
public enum DelayStyle_V2 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V1.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V2.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V2.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V2.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V2.PreviousInstance
}
public enum JSONCurveTo_V2 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V1.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V2.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V2.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V2.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V2 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V1.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V2.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V2.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V2.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V2.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V2.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V2 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V1.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V2.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V1.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double)
    public static func == (a: StitchSchemaKit.LayerDimension_V2.LayerDimension, b: StitchSchemaKit.LayerDimension_V2.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V2.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V1.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V2.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V2.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V2.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V1.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V2.LayerSize, b: StitchSchemaKit.LayerSize_V2.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V2.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V1.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V2.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V2.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V2.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V2.PreviousInstance
}
public enum LayerTextAlignment_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V2.PreviousInstance
}
public enum LayerTextDecoration_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V2.PreviousInstance
}
public enum LayerTextVerticalAlignment_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V2.PreviousInstance
}
public enum LightType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V1.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V2.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V2.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V2.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V2.PreviousInstance
}
public enum MediaKey_V2 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V1.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V2.MediaKey, b: StitchSchemaKit.MediaKey_V2.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V2.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V2.PreviousInstance
}
public enum MediaObjectId_V2 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V2.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V2.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V2.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V2.PreviousInstance
}
public enum NetworkRequestType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V2.PreviousInstance
}
public enum PathPoint_V2 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V1.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V2.PathPoint, b: StitchSchemaKit.PathPoint_V2.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V2.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V1.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V2.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V2.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V2.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V2.PreviousInstance
}
public enum Point3D_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V1.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V2.Point3D, b: StitchSchemaKit.Point3D_V2.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V2.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V2 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V1.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V2.Point4D, b: StitchSchemaKit.Point4D_V2.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V2.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V2 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V1.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V2.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V2.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V2.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RGBA_V2 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V1.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V2.RGBA, b: StitchSchemaKit.RGBA_V2.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V2.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V2 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V1.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V2.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V2.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V2.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V2.PreviousInstance
}
public enum ScrollJumpStyle_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V2.PreviousInstance
}
public enum ScrollMode_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V1.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V2.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V2.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V2.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V2.PreviousInstance
}
public enum ShapeAndRect_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V1.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V2.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V2.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V2.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V2.PreviousInstance
}
public enum ShapeCommand_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V1.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V2.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V2.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V2.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V2.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V2.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V2 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V2.PreviousInstance
}
public enum SidebarLayerData_V2 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V1.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchCameraOrientation_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V2.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V2.PreviousInstance
}
public enum StitchDeviceOrientation_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V2.PreviousInstance
}
public enum StitchFontChoice_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V2.PreviousInstance
}
public enum StitchFontWeight_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V2.PreviousInstance
}
public enum StitchFont_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V1.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V2.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V2.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V2.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V2.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V2.StitchFont, b: StitchSchemaKit.StitchFont_V2.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V2.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V2.PreviousInstance
}
public enum StitchJSON_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V1.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V2.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V2.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V2.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchOrientation_V2 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V1.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V2.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V2.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V2.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V2.PreviousInstance
}
public enum TextTransform_V2 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V1.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V2.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V2.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V2.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V2.PreviousInstance
}
public enum TriangleData_V2 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V1.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V2.TriangleData, b: StitchSchemaKit.TriangleData_V2.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V2.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V2.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V2 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V2.PreviousInstance
}
public enum PreviewSize_V2 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V1.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V2.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V2.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V2.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V2.PreviousInstance
}
public enum SplitterType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V1.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V2.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V2.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V2.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V2.PreviousInstance
}
public enum UserVisibleType_V2 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V1.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V2.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V2.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V2.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V2.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V2.PreviousInstance
}
public enum CommentBoxData_V3 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V2.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V3.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V3.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V3.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V2.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V3.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V3.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V3.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V3.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V3.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V3.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V3.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V3.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V3.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V3.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V3.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V3.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V3.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V3.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V3.StitchDocument, b: StitchSchemaKit.StitchDocument_V3.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V3.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V3.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V3.PreviousInstance)
}
public enum ExpansionDirection_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V2.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V3.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V3.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V3.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InteractionType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.InteractionType_V2.InteractionType
  public enum InteractionType : Swift.String, Swift.Equatable {
    case drag, press, scroll
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.InteractionType_V3.InteractionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.InteractionType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.InteractionType_V3.PreviousInstance
}
public enum Layer_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V2.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V3.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V3.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V3.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V3.PreviousInstance
}
public enum GroupNodeID_V3 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V3.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V3.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V3.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V3.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V3 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V2.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V3.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V3.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V3.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V3.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V3.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V3.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V2.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V3
  public typealias Layer = StitchSchemaKit.Layer_V3.Layer
  public typealias InteractionsDict = [StitchSchemaKit.InteractionType_V1.InteractionType : StitchSchemaKit.NodeIdSet]
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V3.Layer
    public let interactionsDict: StitchSchemaKit.LayerNodeEntity_V3.InteractionsDict
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V3.Layer, interactionsDict: StitchSchemaKit.LayerNodeEntity_V3.InteractionsDict, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V3.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V3.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V3.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V3 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V2.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V3.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V3.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V3.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V3.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V3.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V3.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V3.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V3.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V3.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V3.NodeEntity, b: StitchSchemaKit.NodeEntity_V3.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V3.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V3 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V2.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V3.NodeKind, b: StitchSchemaKit.NodeKind_V3.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V3.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V3.PreviousInstance
}
public enum PatchNodeEntity_V3 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V2.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V3.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V3.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V3.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V3.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V3.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V3.SplitterNodeEntitySchema?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V3.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V3.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V3.SplitterNodeEntitySchema?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V3.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V3.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V3.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V3 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V2.NodeIOCoordinate
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portId: Swift.Int
    public var nodeId: StitchSchemaKit.NodeId
    public init(portId: Swift.Int, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V3.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V3.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V3.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V3 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V2.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V3.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V3.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V3.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V3.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodePortInputEntity_V3.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V3.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V3.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V3.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V3.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V3.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V3.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V3.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V3.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V3.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V3.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V3.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V3.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V3 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V2.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V3.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V3.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V3.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V3.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V3.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V3.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V3.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V3.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V3.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V3.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V3.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V3.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V3.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V3.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V3.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V3.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V3.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V3.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V3.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V3.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V3.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V3.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V3.Point3D)
    case point4D(StitchSchemaKit.PortValue_V3.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V3.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V3.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V3.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V3.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V3.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V3.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V3.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V3.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V3.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V3.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V3.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V3.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V3.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V3.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V3.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V3.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V3.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V3.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V3.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V3.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V3.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V3.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V3.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V3.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V3.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V3.StitchBlendMode)
    public static func == (a: StitchSchemaKit.PortValue_V3.PortValue, b: StitchSchemaKit.PortValue_V3.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V3.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V3.PreviousInstance
}
public enum Patch_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V2.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V3.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V3.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V3.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V3.PreviousInstance
}
public enum Anchoring_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V2.Anchoring
  public enum Anchoring : Swift.String, Swift.CaseIterable {
    case topLeft, topCenter, topRight, centerLeft, center, centerRight, bottomLeft, bottomCenter, bottomRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Anchoring_V3.Anchoring]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Anchoring_V3.Anchoring] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Anchoring_V3.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V3.PreviousInstance
}
public enum AsyncMediaValue_V3 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V2.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V3.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V3.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V3.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V3.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V3.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V3.PreviousInstance
}
public enum CameraDirection_V3 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V2.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V3.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V3.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V3.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V3.PreviousInstance
}
public enum CameraSettings_V3 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V2.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V3.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V3.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V3.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V3.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V3.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V3.CameraSettings, b: StitchSchemaKit.CameraSettings_V3.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V3.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V3.PreviousInstance
}
public enum CustomShape_V3 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V2.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V3.CustomShape, b: StitchSchemaKit.CustomShape_V3.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V3.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V3.PreviousInstance
}
public enum DataType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V2.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V3.DataType<Value>, b: StitchSchemaKit.DataType_V3.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V3.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V1.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V1.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V3 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V3.PreviousInstance
}
public enum DelayStyle_V3 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V2.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V3.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V3.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V3.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V3.PreviousInstance
}
public enum JSONCurveTo_V3 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V2.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V3.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V3.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V3.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V3 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V2.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V3.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V3.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V3.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V3.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V3.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V3 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V2.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V3.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V2.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double)
    public static func == (a: StitchSchemaKit.LayerDimension_V3.LayerDimension, b: StitchSchemaKit.LayerDimension_V3.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V3.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V2.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V3.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V3.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V3.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V2.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V3.LayerSize, b: StitchSchemaKit.LayerSize_V3.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V3.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V2.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V3.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V3.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V3.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V3.PreviousInstance
}
public enum LayerTextAlignment_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V3.PreviousInstance
}
public enum LayerTextDecoration_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V3.PreviousInstance
}
public enum LayerTextVerticalAlignment_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V3.PreviousInstance
}
public enum LightType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V2.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V3.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V3.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V3.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V3.PreviousInstance
}
public enum MediaKey_V3 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V2.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V3.MediaKey, b: StitchSchemaKit.MediaKey_V3.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V3.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V3.PreviousInstance
}
public enum MediaObjectId_V3 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V2.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V3.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V3.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V3.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V3.PreviousInstance
}
public enum NetworkRequestType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V3.PreviousInstance
}
public enum PathPoint_V3 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V2.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V3.PathPoint, b: StitchSchemaKit.PathPoint_V3.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V3.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V2.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V3.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V3.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V3.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V3.PreviousInstance
}
public enum Point3D_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V2.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V3.Point3D, b: StitchSchemaKit.Point3D_V3.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V3.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V3 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V2.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V3.Point4D, b: StitchSchemaKit.Point4D_V3.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V3.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V3 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V2.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V3.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V3.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V3.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RGBA_V3 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V2.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V3.RGBA, b: StitchSchemaKit.RGBA_V3.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V3.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V3 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V2.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V3.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V3.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V3.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V3.PreviousInstance
}
public enum ScrollJumpStyle_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V3.PreviousInstance
}
public enum ScrollMode_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V2.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V3.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V3.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V3.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V3.PreviousInstance
}
public enum ShapeAndRect_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V2.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V3.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V3.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V3.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V3.PreviousInstance
}
public enum ShapeCommand_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V2.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V3.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V3.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V3.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V3.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V3.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V3 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V3.PreviousInstance
}
public enum SidebarLayerData_V3 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V2.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V3.PreviousInstance
}
public enum StitchCameraOrientation_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V3.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V3.PreviousInstance
}
public enum StitchDeviceOrientation_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V3.PreviousInstance
}
public enum StitchFontChoice_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V3.PreviousInstance
}
public enum StitchFontWeight_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V3.PreviousInstance
}
public enum StitchFont_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V2.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V3.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V3.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V3.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V3.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V3.StitchFont, b: StitchSchemaKit.StitchFont_V3.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V3.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V3.PreviousInstance
}
public enum StitchJSON_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V2.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V3.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V3.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V3.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchOrientation_V3 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V2.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V3.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V3.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V3.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V3.PreviousInstance
}
public enum TextTransform_V3 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V2.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V3.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V3.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V3.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V3.PreviousInstance
}
public enum TriangleData_V3 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V2.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V3.TriangleData, b: StitchSchemaKit.TriangleData_V3.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V3.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V3.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V3 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V3.PreviousInstance
}
public enum PreviewSize_V3 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V2.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V3.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V3.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V3.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V3.PreviousInstance
}
public enum SplitterType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V2.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V3.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V3.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V3.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V3.PreviousInstance
}
public enum UserVisibleType_V3 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V2.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V3.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V3.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V3.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V3.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V3.PreviousInstance
}
public enum CommentBoxData_V4 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V3.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V4.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V4.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V4.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V3.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V4.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V4.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V4.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V4.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V4.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V4.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V4.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V4.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V4.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V4.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V4.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V4.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V4.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V4.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V4.StitchDocument, b: StitchSchemaKit.StitchDocument_V4.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V4.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V4.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V4.PreviousInstance)
}
public enum ExpansionDirection_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V3.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V4.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V4.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V4.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V3.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V4.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V4.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V4.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V4.PreviousInstance
}
public enum GroupNodeID_V4 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V4.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V4.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V4.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V4.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V4 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V3.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V4.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V4.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V4.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V4.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V4.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V4.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V3.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V4
  public typealias Layer = StitchSchemaKit.Layer_V4.Layer
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V4.Layer
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V4.Layer, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V4.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V4.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V4.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V4 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V3.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V4.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V4.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V4.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V4.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V4.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V4.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V4.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V4.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V4.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V4.NodeEntity, b: StitchSchemaKit.NodeEntity_V4.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V4.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V4 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V3.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V4.NodeKind, b: StitchSchemaKit.NodeKind_V4.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V4.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V4.PreviousInstance
}
public enum PatchNodeEntity_V4 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V3.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V4.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V4.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V4.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V4.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V4.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V4.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V4.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V4.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V4.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V4.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V4.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V4.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V4 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V3.NodeIOCoordinate
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portId: Swift.Int
    public var nodeId: StitchSchemaKit.NodeId
    public init(portId: Swift.Int, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V4.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V4.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V4.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V4 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V3.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V4.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V4.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V4.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V4.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodePortInputEntity_V4.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V4.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V4.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V4.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V4.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V4.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V4.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V4.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V4.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V4.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V4.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V4.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V4.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V4 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V3.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V4.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V4.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V4.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V4.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V4.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V4.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V4.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V4.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V4.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V4.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V4.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V4.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V4.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V4.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V4.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V4.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V4.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V4.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V4.StitchMapType
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V4.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V4.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V4.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V4.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V4.Point3D)
    case point4D(StitchSchemaKit.PortValue_V4.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V4.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V4.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V4.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V4.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V4.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V4.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V4.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V4.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V4.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V4.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V4.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V4.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V4.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V4.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V4.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V4.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V4.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V4.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V4.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V4.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V4.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V4.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V4.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V4.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V4.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V4.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V4.StitchMapType)
    public static func == (a: StitchSchemaKit.PortValue_V4.PortValue, b: StitchSchemaKit.PortValue_V4.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V4.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V4.PreviousInstance
}
public enum Patch_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V3.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V4.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V4.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V4.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V4.PreviousInstance
}
public enum Anchoring_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V3.Anchoring
  public enum Anchoring : Swift.String, Swift.CaseIterable {
    case topLeft, topCenter, topRight, centerLeft, center, centerRight, bottomLeft, bottomCenter, bottomRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Anchoring_V4.Anchoring]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Anchoring_V4.Anchoring] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Anchoring_V4.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V4.PreviousInstance
}
public enum AsyncMediaValue_V4 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V3.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V4.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V4.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V4.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V4.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V4.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V4.PreviousInstance
}
public enum CameraDirection_V4 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V3.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V4.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V4.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V4.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V4.PreviousInstance
}
public enum CameraSettings_V4 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V3.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V4.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V4.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V4.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V4.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V4.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V4.CameraSettings, b: StitchSchemaKit.CameraSettings_V4.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V4.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V4.PreviousInstance
}
public enum CustomShape_V4 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V3.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V4.CustomShape, b: StitchSchemaKit.CustomShape_V4.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V4.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V4.PreviousInstance
}
public enum DataType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V3.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V4.DataType<Value>, b: StitchSchemaKit.DataType_V4.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V4.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V2.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V2.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V4 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V4.PreviousInstance
}
public enum DelayStyle_V4 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V3.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V4.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V4.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V4.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V4.PreviousInstance
}
public enum JSONCurveTo_V4 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V3.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V4.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V4.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V4.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V4 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V3.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V4.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V4.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V4.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V4.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V4.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V4 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V3.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V4.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V3.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double)
    public static func == (a: StitchSchemaKit.LayerDimension_V4.LayerDimension, b: StitchSchemaKit.LayerDimension_V4.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V4.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V3.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V4.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V4.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V4.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V3.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V4.LayerSize, b: StitchSchemaKit.LayerSize_V4.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V4.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V3.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V4.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V4.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V4.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V4.PreviousInstance
}
public enum LayerTextAlignment_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V4.PreviousInstance
}
public enum LayerTextDecoration_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V4.PreviousInstance
}
public enum LayerTextVerticalAlignment_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V4.PreviousInstance
}
public enum LightType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V3.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V4.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V4.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V4.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V4.PreviousInstance
}
public enum MediaKey_V4 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V3.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V4.MediaKey, b: StitchSchemaKit.MediaKey_V4.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V4.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V4.PreviousInstance
}
public enum MediaObjectId_V4 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V3.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V4.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V4.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V4.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V4.PreviousInstance
}
public enum NetworkRequestType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V4.PreviousInstance
}
public enum PathPoint_V4 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V3.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V4.PathPoint, b: StitchSchemaKit.PathPoint_V4.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V4.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V3.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V4.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V4.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V4.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V4.PreviousInstance
}
public enum Point3D_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V3.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V4.Point3D, b: StitchSchemaKit.Point3D_V4.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V4.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V4 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V3.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V4.Point4D, b: StitchSchemaKit.Point4D_V4.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V4.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V4 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V3.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V4.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V4.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V4.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RGBA_V4 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V3.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V4.RGBA, b: StitchSchemaKit.RGBA_V4.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V4.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V4 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V3.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V4.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V4.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V4.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V4.PreviousInstance
}
public enum ScrollJumpStyle_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V4.PreviousInstance
}
public enum ScrollMode_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V3.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V4.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V4.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V4.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V4.PreviousInstance
}
public enum ShapeAndRect_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V3.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V4.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V4.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V4.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V4.PreviousInstance
}
public enum ShapeCommand_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V3.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V4.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V4.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V4.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V4.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V4.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V4 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V4.PreviousInstance
}
public enum SidebarLayerData_V4 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V3.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V4.PreviousInstance
}
public enum StitchCameraOrientation_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V4.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V4.PreviousInstance
}
public enum StitchDeviceOrientation_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V4.PreviousInstance
}
public enum StitchFontChoice_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V4.PreviousInstance
}
public enum StitchFontWeight_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V4.PreviousInstance
}
public enum StitchFont_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V3.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V4.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V4.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V4.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V4.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V4.StitchFont, b: StitchSchemaKit.StitchFont_V4.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V4.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V4.PreviousInstance
}
public enum StitchJSON_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V3.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V4.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V4.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V4.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V4.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V4.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V4.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V4.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V4.PreviousInstance
}
public enum StitchOrientation_V4 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V3.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V4.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V4.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V4.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V4.PreviousInstance
}
public enum TextTransform_V4 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V3.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V4.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V4.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V4.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V4.PreviousInstance
}
public enum TriangleData_V4 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V3.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V4.TriangleData, b: StitchSchemaKit.TriangleData_V4.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V4.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V4.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V4 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V4.PreviousInstance
}
public enum PreviewSize_V4 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V3.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V4.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V4.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V4.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V4.PreviousInstance
}
public enum SplitterType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V3.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V4.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V4.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V4.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V4.PreviousInstance
}
public enum UserVisibleType_V4 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V3.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V4.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V4.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V4.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V4.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V4.PreviousInstance
}
public enum CommentBoxData_V5 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V4.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V5.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V5.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V5.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V4.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V5.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V5.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V5.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V5.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V5.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V5.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V5.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V5.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V5.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V5.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V5.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V5.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V5.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V5.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V5.StitchDocument, b: StitchSchemaKit.StitchDocument_V5.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V5.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V5.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V5.PreviousInstance)
}
public enum ExpansionDirection_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V4.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V5.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V5.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V5.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V4.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V5.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V5.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V5.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V5.PreviousInstance
}
public enum GroupNodeID_V5 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V5.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V5.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V5.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V5.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V5 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V4.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V5.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V5.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V5.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V5.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V5.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V5.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V4.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V5
  public typealias Layer = StitchSchemaKit.Layer_V5.Layer
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V5.Layer
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V5.Layer, hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V5.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V5.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V5.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V5 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V4.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V5.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V5.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V5.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V5.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V5.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V5.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V5.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V5.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V5.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V5.NodeEntity, b: StitchSchemaKit.NodeEntity_V5.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V5.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V5 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V4.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V5.NodeKind, b: StitchSchemaKit.NodeKind_V5.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V5.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V5.PreviousInstance
}
public enum PatchNodeEntity_V5 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V4.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V5.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V5.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V5.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V5.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V5.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V5.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V5.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V5.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V5.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V5.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V5.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V5.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOCoordinate_V5 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V4.NodeIOCoordinate
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portId: Swift.Int
    public var nodeId: StitchSchemaKit.NodeId
    public init(portId: Swift.Int, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V5.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V5.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V5.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V5 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V4.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V5.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V5.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V5.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V5.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodePortInputEntity_V5.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V5.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V5.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V5.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V5.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V5.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V5.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V5.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V5.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V5.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V5.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V5.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V5.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V5 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V4.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V5.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V5.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V5.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V5.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V5.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V5.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V5.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V5.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V5.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V5.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V5.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V5.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V5.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V5.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V5.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V5.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V5.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V5.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V5.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V5.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V5.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V5.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V5.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V5.Point3D)
    case point4D(StitchSchemaKit.PortValue_V5.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V5.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V5.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V5.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V5.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V5.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V5.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V5.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V5.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V5.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V5.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V5.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V5.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V5.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V5.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V5.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V5.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V5.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V5.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V5.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V5.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V5.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V5.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V5.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V5.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V5.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V5.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V5.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V5.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V5.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V5.PortValue, b: StitchSchemaKit.PortValue_V5.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V5.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V5.PreviousInstance
}
public enum Patch_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V4.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V5.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V5.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V5.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V5.PreviousInstance
}
public enum Anchoring_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V4.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var y: Swift.Double
    public var x: Swift.Double
    public init(y: Swift.Double, x: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V5.Anchoring, b: StitchSchemaKit.Anchoring_V5.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V5.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V5.PreviousInstance
}
public enum AsyncMediaValue_V5 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V4.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V5.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V5.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V5.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V5.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V5.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V5.PreviousInstance
}
public enum CameraDirection_V5 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V4.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V5.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V5.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V5.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V5.PreviousInstance
}
public enum CameraSettings_V5 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V4.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V5.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V5.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V5.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V5.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V5.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V5.CameraSettings, b: StitchSchemaKit.CameraSettings_V5.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V5.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V5.PreviousInstance
}
public enum CustomShape_V5 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V4.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V5.CustomShape, b: StitchSchemaKit.CustomShape_V5.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V5.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V5.PreviousInstance
}
public enum DataType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V4.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V5.DataType<Value>, b: StitchSchemaKit.DataType_V5.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V5.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V3.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V3.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V5 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V5.PreviousInstance
}
public enum DelayStyle_V5 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V4.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V5.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V5.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V5.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V5.PreviousInstance
}
public enum JSONCurveTo_V5 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V4.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V5.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V5.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V5.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V5 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V4.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V5.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V5.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V5.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V5.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V5.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V5 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V4.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V5.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V4.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V5.LayerDimension, b: StitchSchemaKit.LayerDimension_V5.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V5.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V4.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V5.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V5.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V5.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V4.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V5.LayerSize, b: StitchSchemaKit.LayerSize_V5.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V5.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V4.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V5.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V5.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V5.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V5.PreviousInstance
}
public enum LayerTextAlignment_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V5.PreviousInstance
}
public enum LayerTextDecoration_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V5.PreviousInstance
}
public enum LayerTextVerticalAlignment_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V5.PreviousInstance
}
public enum LightType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V4.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V5.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V5.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V5.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V5.PreviousInstance
}
public enum MediaKey_V5 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V4.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V5.MediaKey, b: StitchSchemaKit.MediaKey_V5.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V5.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V5.PreviousInstance
}
public enum MediaObjectId_V5 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V4.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V5.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V5.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V5.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V5.PreviousInstance
}
public enum MobileHapticStyle_V5 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V5.PreviousInstance
}
public enum NetworkRequestType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V5.PreviousInstance
}
public enum PathPoint_V5 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V4.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V5.PathPoint, b: StitchSchemaKit.PathPoint_V5.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V5.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V4.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V5.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V5.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V5.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V5.PreviousInstance
}
public enum Point3D_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V4.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V5.Point3D, b: StitchSchemaKit.Point3D_V5.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V5.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V5 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V4.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V5.Point4D, b: StitchSchemaKit.Point4D_V5.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V5.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V5 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V4.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V5.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V5.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V5.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V5.PreviousInstance
}
public enum RGBA_V5 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V4.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V5.RGBA, b: StitchSchemaKit.RGBA_V5.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V5.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V5 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V4.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V5.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V5.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V5.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V5.PreviousInstance
}
public enum ScrollJumpStyle_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V5.PreviousInstance
}
public enum ScrollMode_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V4.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V5.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V5.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V5.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V5.PreviousInstance
}
public enum ShapeAndRect_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V4.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V5.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V5.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V5.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V5.PreviousInstance
}
public enum ShapeCommand_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V4.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V5.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V5.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V5.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V5.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V5.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V5 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V5.PreviousInstance
}
public enum SidebarLayerData_V5 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V4.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V5.PreviousInstance
}
public enum StitchCameraOrientation_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V5.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V5.PreviousInstance
}
public enum StitchDeviceOrientation_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V5.PreviousInstance
}
public enum StitchFontChoice_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V5.PreviousInstance
}
public enum StitchFontWeight_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V5.PreviousInstance
}
public enum StitchFont_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V4.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V5.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V5.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V5.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V5.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V5.StitchFont, b: StitchSchemaKit.StitchFont_V5.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V5.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V5.PreviousInstance
}
public enum StitchJSON_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V4.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V5.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V5.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V5.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V4.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V5.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V5.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V5.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V5.PreviousInstance
}
public enum StitchOrientation_V5 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V4.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V5.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V5.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V5.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V5.PreviousInstance
}
public enum TextTransform_V5 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V4.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V5.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V5.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V5.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V5.PreviousInstance
}
public enum TriangleData_V5 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V4.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V5.TriangleData, b: StitchSchemaKit.TriangleData_V5.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V5.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V5.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V5 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V5.PreviousInstance
}
public enum PreviewSize_V5 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V4.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V5.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V5.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V5.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V5.PreviousInstance
}
public enum SplitterType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V4.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V5.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V5.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V5.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V5.PreviousInstance
}
public enum UserVisibleType_V5 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V4.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V5.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V5.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V5.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V5.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V5.PreviousInstance
}
public enum CommentBoxData_V6 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V5.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V6.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V6.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V6.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V5.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V6.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V6.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V6.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V6.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V6.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V6.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V6.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V6.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V6.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V6.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V6.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V6.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V6.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V6.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V6.StitchDocument, b: StitchSchemaKit.StitchDocument_V6.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V6.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V6.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V6.PreviousInstance)
}
public enum ExpansionDirection_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V5.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V6.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V6.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V6.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V5.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V6.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V6.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V6.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V6.PreviousInstance
}
public enum GroupNodeID_V6 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V6.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V6.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V6.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V6.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V6 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V5.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V6.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V6.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V6.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V6.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V6.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V6.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V5.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V6
  public typealias Layer = StitchSchemaKit.Layer_V6.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V6.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V6.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), sizePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), scalePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), anchoringPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), opacityPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), zIndexPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), colorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), rotationXPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), rotationYPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), rotationZPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), lineColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), lineWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), blurPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), blendModePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), brightnessPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), colorInvertPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), contrastPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), hueRotationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), saturationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), pivotPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), enabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), isClippedPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), orientationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), paddingPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), setupModePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), shapePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), strokePositionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), strokeColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), textPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), fontSizePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), textDecorationPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), textFontPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), imagePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), videoPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), fitStylePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), clippedPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), progressPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), model3DPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), mapTypePort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), mapSpanPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V6.NodeConnectionType = .values([]), hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V5.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V6.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V6.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V6.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V6.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V6.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V6.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V6.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V6.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V6.NodeEntity, b: StitchSchemaKit.NodeEntity_V6.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V6.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V5.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V6.NodeKind, b: StitchSchemaKit.NodeKind_V6.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V6.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V6.PreviousInstance
}
public enum PatchNodeEntity_V6 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V5.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V6.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V6.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V6.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V6.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V6.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V6.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V6.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V6.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V6.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V6.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V6.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V6.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V6.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case canvasPosition
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    public static func == (a: StitchSchemaKit.LayerInputType_V6.LayerInputType, b: StitchSchemaKit.LayerInputType_V6.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V6.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V6.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V5.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V6.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V6.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V6.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V6.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V6.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V6.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V6.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V6.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V6.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V5.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V6.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V6.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V6.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V6.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V6.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V6.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V6.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V6.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V6.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V6.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V6.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V6.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V6.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V6.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V6.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V6.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V6.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V6.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V6.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V6 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V5.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V6.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V6.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V6.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V6.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V6.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V6.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V6.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V6.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V6.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V6.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V6.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V6.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V6.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V6.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V6.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V6.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V6.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V6.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V6.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V6.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V6.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V6.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V6.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V6.Point3D)
    case point4D(StitchSchemaKit.PortValue_V6.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V6.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V6.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V6.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V6.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V6.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V6.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V6.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V6.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V6.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V6.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V6.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V6.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V6.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V6.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V6.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V6.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V6.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V6.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V6.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V6.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V6.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V6.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V6.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V6.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V6.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V6.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V6.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V6.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V6.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V6.PortValue, b: StitchSchemaKit.PortValue_V6.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V6.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V6.PreviousInstance
}
public enum Patch_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V5.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V6.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V6.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V6.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V6.PreviousInstance
}
public enum Anchoring_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V5.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V6.Anchoring, b: StitchSchemaKit.Anchoring_V6.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V6.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V6.PreviousInstance
}
public enum AsyncMediaValue_V6 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V5.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V6.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V6.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V6.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V6.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V6.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V6.PreviousInstance
}
public enum CameraDirection_V6 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V5.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V6.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V6.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V6.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V6.PreviousInstance
}
public enum CameraSettings_V6 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V5.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V6.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V6.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V6.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V6.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V6.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V6.CameraSettings, b: StitchSchemaKit.CameraSettings_V6.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V6.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V6.PreviousInstance
}
public enum CustomShape_V6 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V5.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V6.CustomShape, b: StitchSchemaKit.CustomShape_V6.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V6.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V6.PreviousInstance
}
public enum DataType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V5.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V6.DataType<Value>, b: StitchSchemaKit.DataType_V6.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V6.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V4.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V4.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V6 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V6.PreviousInstance
}
public enum DelayStyle_V6 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V5.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V6.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V6.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V6.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V6.PreviousInstance
}
public enum JSONCurveTo_V6 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V5.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V6.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V6.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V6.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V6 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V5.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V6.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V6.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V6.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V6.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V6.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V6 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V5.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V6.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V5.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V6.LayerDimension, b: StitchSchemaKit.LayerDimension_V6.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V6.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V5.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V6.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V6.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V6.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V5.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V6.LayerSize, b: StitchSchemaKit.LayerSize_V6.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V6.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V5.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V6.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V6.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V6.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V6.PreviousInstance
}
public enum LayerTextAlignment_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V6.PreviousInstance
}
public enum LayerTextDecoration_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V6.PreviousInstance
}
public enum LayerTextVerticalAlignment_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V6.PreviousInstance
}
public enum LightType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V5.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V6.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V6.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V6.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V6.PreviousInstance
}
public enum MediaKey_V6 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V5.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V6.MediaKey, b: StitchSchemaKit.MediaKey_V6.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V6.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V6.PreviousInstance
}
public enum MediaObjectId_V6 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V5.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V6.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V6.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V6.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V6.PreviousInstance
}
public enum MobileHapticStyle_V6 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V6.PreviousInstance
}
public enum NetworkRequestType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V6.PreviousInstance
}
public enum PathPoint_V6 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V5.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V6.PathPoint, b: StitchSchemaKit.PathPoint_V6.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V6.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V5.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V6.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V6.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V6.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V6.PreviousInstance
}
public enum Point3D_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V5.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V6.Point3D, b: StitchSchemaKit.Point3D_V6.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V6.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V6 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V5.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V6.Point4D, b: StitchSchemaKit.Point4D_V6.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V6.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V6 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V5.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V6.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V6.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V6.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V6.PreviousInstance
}
public enum RGBA_V6 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V5.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V6.RGBA, b: StitchSchemaKit.RGBA_V6.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V6.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V6 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V5.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V6.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V6.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V6.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V6.PreviousInstance
}
public enum ScrollJumpStyle_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V6.PreviousInstance
}
public enum ScrollMode_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V5.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V6.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V6.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V6.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V6.PreviousInstance
}
public enum ShapeAndRect_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V5.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V6.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V6.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V6.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V6.PreviousInstance
}
public enum ShapeCommand_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V5.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V6.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V6.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V6.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V6.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V6.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V6 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V6.PreviousInstance
}
public enum SidebarLayerData_V6 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V5.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData) -> Swift.Bool
  }
}
extension StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V6.PreviousInstance
}
public enum StitchCameraOrientation_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V6.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V6.PreviousInstance
}
public enum StitchDeviceOrientation_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V6.PreviousInstance
}
public enum StitchFontChoice_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V6.PreviousInstance
}
public enum StitchFontWeight_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V6.PreviousInstance
}
public enum StitchFont_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V5.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V6.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V6.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V6.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V6.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V6.StitchFont, b: StitchSchemaKit.StitchFont_V6.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V6.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V6.PreviousInstance
}
public enum StitchJSON_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V5.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V6.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V6.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V6.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V5.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V6.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V6.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V6.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V6.PreviousInstance
}
public enum StitchOrientation_V6 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V5.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V6.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V6.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V6.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V6.PreviousInstance
}
public enum TextTransform_V6 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V5.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V6.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V6.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V6.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V6.PreviousInstance
}
public enum TriangleData_V6 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V5.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V6.TriangleData, b: StitchSchemaKit.TriangleData_V6.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V6.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V6.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V6 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V6.PreviousInstance
}
public enum PreviewSize_V6 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V5.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V6.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V6.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V6.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V6.PreviousInstance
}
public enum SplitterType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V5.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V6.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V6.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V6.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V6.PreviousInstance
}
public enum UserVisibleType_V6 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V5.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V6.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V6.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V6.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V6.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V6.PreviousInstance
}
public enum CommentBoxData_V7 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V6.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V7.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V7.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V7.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V6.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V7.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V7.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V7.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V7.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V7.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V7.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V7.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V7.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V7.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V7.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V7.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V7.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V7.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V7.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V7.StitchDocument, b: StitchSchemaKit.StitchDocument_V7.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V7.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V7.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V7.PreviousInstance)
}
public enum ExpansionDirection_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V6.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V7.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V7.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V7.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V6.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V7.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V7.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V7.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V7.PreviousInstance
}
public enum GroupNodeID_V7 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V7.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V7.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V7.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V7.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V7 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V6.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V7.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V7.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V7.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V7.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V7.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V7.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V6.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V7
  public typealias Layer = StitchSchemaKit.Layer_V7.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V7.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V7.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), sizePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), scalePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), anchoringPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), opacityPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), zIndexPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), masksPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), colorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), rotationXPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), rotationYPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), rotationZPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), lineColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), lineWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), blurPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), blendModePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), brightnessPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), colorInvertPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), contrastPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), hueRotationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), saturationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), pivotPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), enabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), isClippedPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), orientationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), paddingPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), setupModePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), shapePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), strokePositionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), strokeColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), textPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), fontSizePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), textDecorationPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), textFontPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), imagePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), videoPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), fitStylePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), clippedPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), progressPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), model3DPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), mapTypePort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), mapSpanPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V7.NodeConnectionType = .values([]), hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V6.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V7.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V7.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V7.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V7.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V7.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V7.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V7.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V7.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V7.NodeEntity, b: StitchSchemaKit.NodeEntity_V7.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V7.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V6.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V7.NodeKind, b: StitchSchemaKit.NodeKind_V7.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V7.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V7.PreviousInstance
}
public enum PatchNodeEntity_V7 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V6.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V7.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V7.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V7.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V7.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V7.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V7.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V7.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V7.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V7.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V7.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V7.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V7.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V6.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case canvasPosition
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    public static func == (a: StitchSchemaKit.LayerInputType_V7.LayerInputType, b: StitchSchemaKit.LayerInputType_V7.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V7.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V7.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V6.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V7.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V7.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V7.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V7.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V7.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V7.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V7.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V7.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V7.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V6.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V7.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V7.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V7.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V7.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V7.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V7.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V7.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V7.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V7.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V7.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V7.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V7.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V7.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V7.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V7.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V7.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V6.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V7.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V7.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V7.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V7 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V6.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V7.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V7.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V7.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V7.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V7.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V7.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V7.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V7.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V7.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V7.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V7.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V7.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V7.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V7.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V7.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V7.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V7.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V7.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V7.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V7.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V7.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V7.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V7.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V7.Point3D)
    case point4D(StitchSchemaKit.PortValue_V7.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V7.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V7.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V7.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V7.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V7.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V7.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V7.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V7.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V7.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V7.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V7.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V7.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V7.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V7.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V7.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V7.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V7.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V7.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V7.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V7.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V7.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V7.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V7.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V7.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V7.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V7.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V7.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V7.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V7.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V7.PortValue, b: StitchSchemaKit.PortValue_V7.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V7.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V7.PreviousInstance
}
public enum Patch_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V6.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V7.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V7.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V7.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V7.PreviousInstance
}
public enum Anchoring_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V6.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V7.Anchoring, b: StitchSchemaKit.Anchoring_V7.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V7.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V7.PreviousInstance
}
public enum AsyncMediaValue_V7 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V6.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V7.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V7.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V7.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V7.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V7.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V7.PreviousInstance
}
public enum CameraDirection_V7 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V6.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V7.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V7.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V7.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V7.PreviousInstance
}
public enum CameraSettings_V7 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V6.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V7.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V7.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V7.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V7.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V7.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V7.CameraSettings, b: StitchSchemaKit.CameraSettings_V7.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V7.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V7.PreviousInstance
}
public enum CustomShape_V7 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V6.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V7.CustomShape, b: StitchSchemaKit.CustomShape_V7.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V7.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V7.PreviousInstance
}
public enum DataType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V6.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V7.DataType<Value>, b: StitchSchemaKit.DataType_V7.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V7.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V5.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V5.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V7 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V7.PreviousInstance
}
public enum DelayStyle_V7 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V6.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V7.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V7.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V7.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V7.PreviousInstance
}
public enum JSONCurveTo_V7 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V6.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V7.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V7.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V7.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V7 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V6.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V7.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V7.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V7.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V7.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V7.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V7 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V6.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V7.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V6.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V7.LayerDimension, b: StitchSchemaKit.LayerDimension_V7.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V7.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V6.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V7.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V7.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V7.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V6.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V7.LayerSize, b: StitchSchemaKit.LayerSize_V7.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V7.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V6.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V7.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V7.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V7.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V7.PreviousInstance
}
public enum LayerTextAlignment_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V7.PreviousInstance
}
public enum LayerTextDecoration_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V7.PreviousInstance
}
public enum LayerTextVerticalAlignment_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V7.PreviousInstance
}
public enum LightType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V6.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V7.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V7.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V7.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V7.PreviousInstance
}
public enum MediaKey_V7 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V6.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V7.MediaKey, b: StitchSchemaKit.MediaKey_V7.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V7.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V7.PreviousInstance
}
public enum MediaObjectId_V7 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V6.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V7.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V7.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V7.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V7.PreviousInstance
}
public enum MobileHapticStyle_V7 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V7.PreviousInstance
}
public enum NetworkRequestType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V7.PreviousInstance
}
public enum PathPoint_V7 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V6.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V7.PathPoint, b: StitchSchemaKit.PathPoint_V7.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V7.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V6.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V7.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V7.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V7.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V7.PreviousInstance
}
public enum Point3D_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V6.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V7.Point3D, b: StitchSchemaKit.Point3D_V7.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V7.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V7 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V6.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V7.Point4D, b: StitchSchemaKit.Point4D_V7.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V7.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V7 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V6.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V7.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V7.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V7.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V7.PreviousInstance
}
public enum RGBA_V7 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V6.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V7.RGBA, b: StitchSchemaKit.RGBA_V7.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V7.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V7 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V6.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V7.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V7.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V7.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V7.PreviousInstance
}
public enum ScrollJumpStyle_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V7.PreviousInstance
}
public enum ScrollMode_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V6.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V7.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V7.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V7.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V7.PreviousInstance
}
public enum ShapeAndRect_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V6.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V7.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V7.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V7.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V7.PreviousInstance
}
public enum ShapeCommand_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V6.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V7.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V7.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V7.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V7.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V7.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V7 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V7.PreviousInstance
}
public enum SidebarLayerData_V7 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V6.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V7.PreviousInstance
}
public enum StitchCameraOrientation_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V7.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V7.PreviousInstance
}
public enum StitchDeviceOrientation_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V7.PreviousInstance
}
public enum StitchFontChoice_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V7.PreviousInstance
}
public enum StitchFontWeight_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V7.PreviousInstance
}
public enum StitchFont_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V6.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V7.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V7.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V7.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V7.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V7.StitchFont, b: StitchSchemaKit.StitchFont_V7.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V7.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V7.PreviousInstance
}
public enum StitchJSON_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V6.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V7.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V7.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V7.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V6.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V7.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V7.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V7.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V7.PreviousInstance
}
public enum StitchOrientation_V7 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V6.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V7.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V7.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V7.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V7.PreviousInstance
}
public enum TextTransform_V7 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V6.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V7.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V7.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V7.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V7.PreviousInstance
}
public enum TriangleData_V7 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V6.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V7.TriangleData, b: StitchSchemaKit.TriangleData_V7.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V7.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V7.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V7 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V7.PreviousInstance
}
public enum PreviewSize_V7 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V6.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V7.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V7.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V7.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V7.PreviousInstance
}
public enum SplitterType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V6.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V7.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V7.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V7.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V7.PreviousInstance
}
public enum UserVisibleType_V7 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V6.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V7.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V7.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V7.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V7.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V7.PreviousInstance
}
public enum CommentBoxData_V8 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V7.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V8.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V8.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V8.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V7.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V8.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V8.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V8.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V8.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V8.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V8.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V8.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V8.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V8.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V8.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V8.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V8.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V8.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V8.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V8.StitchDocument, b: StitchSchemaKit.StitchDocument_V8.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V8.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V8.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V8.PreviousInstance)
}
public enum ExpansionDirection_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V7.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V8.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V8.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V8.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V7.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V8.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V8.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V8.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V8.PreviousInstance
}
public enum GroupNodeID_V8 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V8.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V8.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V8.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V8.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V8 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V7.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V8.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V8.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V8.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V8.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V8.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V8.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V7.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V8
  public typealias Layer = StitchSchemaKit.Layer_V8.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V8.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V8.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), sizePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), scalePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), anchoringPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), opacityPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), zIndexPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), masksPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), colorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), rotationXPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), rotationYPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), rotationZPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), lineColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), lineWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), blurPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), blendModePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), brightnessPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), colorInvertPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), contrastPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), hueRotationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), saturationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), pivotPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), enabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), isClippedPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), orientationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), paddingPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), setupModePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), shapePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), strokePositionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), strokeColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), strokeStartPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), strokeEndPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), textPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), fontSizePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), textDecorationPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), textFontPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), imagePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), videoPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), fitStylePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), clippedPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), progressPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), model3DPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), mapTypePort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), mapSpanPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V8.NodeConnectionType = .values([]), hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V7.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V8.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V8.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V8.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V8.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V8.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V8.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V8.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V8.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V8.NodeEntity, b: StitchSchemaKit.NodeEntity_V8.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V8.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V7.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V8.NodeKind, b: StitchSchemaKit.NodeKind_V8.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V8.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V8.PreviousInstance
}
public enum PatchNodeEntity_V8 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V7.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V8.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V8.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V8.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V8.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V8.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V8.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V8.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V8.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V8.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V8.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V8.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V8.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V7.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case canvasPosition
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    public static func == (a: StitchSchemaKit.LayerInputType_V8.LayerInputType, b: StitchSchemaKit.LayerInputType_V8.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V8.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V8.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V7.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V8.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V8.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V8.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V8.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V8.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V8.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V8.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V8.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V8.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V7.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V8.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V8.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V8.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V8.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V8.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V8.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V8.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V8.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V8.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V8.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V8.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V8.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V8.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V8.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V8.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V8.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V7.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V8.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V8.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V8.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V8 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V7.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V8.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V8.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V8.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V8.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V8.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V8.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V8.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V8.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V8.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V8.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V8.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V8.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V8.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V8.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V8.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V8.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V8.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V8.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V8.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V8.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V8.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V8.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V8.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V8.Point3D)
    case point4D(StitchSchemaKit.PortValue_V8.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V8.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V8.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V8.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V8.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V8.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V8.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V8.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V8.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V8.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V8.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V8.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V8.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V8.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V8.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V8.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V8.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V8.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V8.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V8.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V8.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V8.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V8.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V8.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V8.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V8.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V8.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V8.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V8.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V8.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V8.PortValue, b: StitchSchemaKit.PortValue_V8.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V8.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V8.PreviousInstance
}
public enum Patch_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V7.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V8.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V8.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V8.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V8.PreviousInstance
}
public enum Anchoring_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V7.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V8.Anchoring, b: StitchSchemaKit.Anchoring_V8.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V8.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V8.PreviousInstance
}
public enum AsyncMediaValue_V8 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V7.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V8.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V8.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V8.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V8.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V8.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V8.PreviousInstance
}
public enum CameraDirection_V8 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V7.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V8.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V8.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V8.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V8.PreviousInstance
}
public enum CameraSettings_V8 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V7.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V8.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V8.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V8.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V8.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V8.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V8.CameraSettings, b: StitchSchemaKit.CameraSettings_V8.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V8.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V8.PreviousInstance
}
public enum CustomShape_V8 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V7.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V8.CustomShape, b: StitchSchemaKit.CustomShape_V8.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V8.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V8.PreviousInstance
}
public enum DataType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V7.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V8.DataType<Value>, b: StitchSchemaKit.DataType_V8.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V8.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V6.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V6.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V8 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V8.PreviousInstance
}
public enum DelayStyle_V8 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V7.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V8.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V8.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V8.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V8.PreviousInstance
}
public enum JSONCurveTo_V8 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V7.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V8.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V8.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V8.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V8 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V7.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V8.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V8.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V8.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V8.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V8.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V8 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V7.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V8.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V7.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V8.LayerDimension, b: StitchSchemaKit.LayerDimension_V8.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V8.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V7.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V8.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V8.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V8.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V7.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V8.LayerSize, b: StitchSchemaKit.LayerSize_V8.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V8.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V7.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V8.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V8.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V8.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V8.PreviousInstance
}
public enum LayerTextAlignment_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V8.PreviousInstance
}
public enum LayerTextDecoration_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V8.PreviousInstance
}
public enum LayerTextVerticalAlignment_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V8.PreviousInstance
}
public enum LightType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V7.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V8.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V8.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V8.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V8.PreviousInstance
}
public enum MediaKey_V8 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V7.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V8.MediaKey, b: StitchSchemaKit.MediaKey_V8.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V8.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V8.PreviousInstance
}
public enum MediaObjectId_V8 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V7.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V8.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V8.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V8.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V8.PreviousInstance
}
public enum MobileHapticStyle_V8 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V8.PreviousInstance
}
public enum NetworkRequestType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V8.PreviousInstance
}
public enum PathPoint_V8 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V7.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V8.PathPoint, b: StitchSchemaKit.PathPoint_V8.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V8.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V7.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V8.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V8.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V8.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V8.PreviousInstance
}
public enum Point3D_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V7.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V8.Point3D, b: StitchSchemaKit.Point3D_V8.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V8.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V8 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V7.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V8.Point4D, b: StitchSchemaKit.Point4D_V8.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V8.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V8 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V7.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V8.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V8.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V8.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V8.PreviousInstance
}
public enum RGBA_V8 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V7.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V8.RGBA, b: StitchSchemaKit.RGBA_V8.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V8.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V8 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V7.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V8.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V8.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V8.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V8.PreviousInstance
}
public enum ScrollJumpStyle_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V8.PreviousInstance
}
public enum ScrollMode_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V7.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V8.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V8.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V8.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V8.PreviousInstance
}
public enum ShapeAndRect_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V7.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V8.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V8.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V8.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V8.PreviousInstance
}
public enum ShapeCommand_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V7.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V8.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V8.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V8.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V8.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V8.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V8 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V8.PreviousInstance
}
public enum SidebarLayerData_V8 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V7.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V8.PreviousInstance
}
public enum StitchCameraOrientation_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V8.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V8.PreviousInstance
}
public enum StitchDeviceOrientation_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V8.PreviousInstance
}
public enum StitchFontChoice_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V8.PreviousInstance
}
public enum StitchFontWeight_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V8.PreviousInstance
}
public enum StitchFont_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V7.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V8.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V8.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V8.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V8.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V8.StitchFont, b: StitchSchemaKit.StitchFont_V8.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V8.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V8.PreviousInstance
}
public enum StitchJSON_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V7.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V8.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V8.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V8.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V7.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V8.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V8.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V8.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V8.PreviousInstance
}
public enum StitchOrientation_V8 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V7.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V8.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V8.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V8.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V8.PreviousInstance
}
public enum TextTransform_V8 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V7.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V8.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V8.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V8.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V8.PreviousInstance
}
public enum TriangleData_V8 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V7.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V8.TriangleData, b: StitchSchemaKit.TriangleData_V8.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V8.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V8.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V8 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V8.PreviousInstance
}
public enum PreviewSize_V8 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V7.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V8.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V8.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V8.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V8.PreviousInstance
}
public enum SplitterType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V7.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V8.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V8.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V8.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V8.PreviousInstance
}
public enum UserVisibleType_V8 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V7.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V8.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V8.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V8.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V8.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V8.PreviousInstance
}
public enum CommentBoxData_V9 {
  public typealias PreviousInstance = StitchSchemaKit.CommentBoxData_V8.CommentBoxData
  public struct CommentBoxData : Swift.Equatable, Swift.Hashable {
    public var id: Foundation.UUID
    public var groupId: StitchSchemaKit.NodeId?
    public var title: Swift.String
    public var color: SwiftUI.Color
    public var nodes: StitchSchemaKit.NodeIdSet
    public var position: CoreFoundation.CGPoint
    public var size: CoreFoundation.CGSize
    public var zIndex: Swift.Double
    public init(id: StitchSchemaKit.CommentBoxId = .init(), groupId: StitchSchemaKit.NodeId? = nil, title: Swift.String = "Comment", color: SwiftUI.Color, nodes: StitchSchemaKit.NodeIdSet = .init(), position: CoreFoundation.CGPoint = .zero, size: CoreFoundation.CGSize, zIndex: Swift.Double)
    public static func == (a: StitchSchemaKit.CommentBoxData_V9.CommentBoxData, b: StitchSchemaKit.CommentBoxData_V9.CommentBoxData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CommentBoxData_V9.CommentBoxData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CommentBoxData_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CommentBoxData_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchDocument_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDocument_V8.StitchDocument
  public typealias NodeEntitySchemas = [StitchSchemaKit.NodeEntity_V9.NodeEntity]
  public typealias CommentBoxes = [StitchSchemaKit.CommentBoxData_V9.CommentBoxData]
  public typealias PreviewSize = StitchSchemaKit.PreviewSize_V9.PreviewSize
  public typealias SidebarLayerDataList = [StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData]
  public typealias CameraSettings = StitchSchemaKit.CameraSettings_V9.CameraSettings
  public struct StitchDocument : StitchSchemaKit.StitchVersionedCodable, Swift.Equatable {
    public var projectId: StitchSchemaKit.ProjectId
    public var name: Swift.String
    public let previewWindowSize: CoreFoundation.CGSize
    public let previewSizeDevice: StitchSchemaKit.StitchDocument_V9.PreviewSize
    public let previewWindowBackgroundColor: SwiftUI.Color
    public let localPosition: CoreFoundation.CGPoint
    public let zoomData: CoreFoundation.CGFloat
    public var nodes: StitchSchemaKit.StitchDocument_V9.NodeEntitySchemas
    public var orderedSidebarLayers: StitchSchemaKit.StitchDocument_V9.SidebarLayerDataList
    public let commentBoxes: StitchSchemaKit.StitchDocument_V9.CommentBoxes
    public let cameraSettings: StitchSchemaKit.StitchDocument_V9.CameraSettings
    public init(projectId: StitchSchemaKit.ProjectId, name: Swift.String, previewWindowSize: CoreFoundation.CGSize, previewSizeDevice: StitchSchemaKit.StitchDocument_V9.PreviewSize, previewWindowBackgroundColor: SwiftUI.Color, localPosition: CoreFoundation.CGPoint, zoomData: CoreFoundation.CGFloat, nodes: StitchSchemaKit.StitchDocument_V9.NodeEntitySchemas, orderedSidebarLayers: StitchSchemaKit.StitchDocument_V9.SidebarLayerDataList, commentBoxes: StitchSchemaKit.StitchDocument_V9.CommentBoxes, cameraSettings: StitchSchemaKit.StitchDocument_V9.CameraSettings)
    public static func == (a: StitchSchemaKit.StitchDocument_V9.StitchDocument, b: StitchSchemaKit.StitchDocument_V9.StitchDocument) -> Swift.Bool
    public typealias PreviousCodable = StitchSchemaKit.StitchDocument_V9.PreviousInstance
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchDocument_V9.StitchDocument {
  public init(previousInstance: StitchSchemaKit.StitchDocument_V9.PreviousInstance)
}
public enum ExpansionDirection_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ExpansionDirection_V8.ExpansionDirection
  public enum ExpansionDirection : Swift.Equatable, Swift.Hashable {
    case topLeft, topRight, bottomLeft, bottomRight, none
    public static func == (a: StitchSchemaKit.ExpansionDirection_V9.ExpansionDirection, b: StitchSchemaKit.ExpansionDirection_V9.ExpansionDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ExpansionDirection_V9.ExpansionDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ExpansionDirection_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ExpansionDirection_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Layer_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Layer_V8.Layer
  public enum Layer : Swift.String, Swift.CaseIterable {
    case text, oval, rectangle, image, group, video, model3D, realityView, shape, colorFill, hitArea, canvasSketch, textField, map, progressIndicator, switchLayer, linearGradient
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Layer_V9.Layer]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Layer_V9.Layer] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Layer_V9.Layer : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Layer_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Layer_V9.PreviousInstance
}
public enum GroupNodeID_V9 {
  public typealias PreviousInstance = StitchSchemaKit.GroupNodeID_V9.GroupNodeId
  public struct GroupNodeId : Swift.Equatable, Swift.Hashable, Swift.Identifiable {
    public let id: StitchSchemaKit.NodeId
    public init(id: StitchSchemaKit.NodeId)
    public init(_ id: Foundation.UUID)
    public static func == (a: StitchSchemaKit.GroupNodeID_V9.GroupNodeId, b: StitchSchemaKit.GroupNodeID_V9.GroupNodeId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = StitchSchemaKit.NodeId
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.GroupNodeID_V9.GroupNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.GroupNodeID_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.GroupNodeID_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SplitterNodeEntity_V9 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterNodeEntity_V8.SplitterNodeEntity
  public typealias SplitterType = StitchSchemaKit.SplitterType_V9.SplitterType
  public struct SplitterNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let lastModifiedDate: Foundation.Date
    public let type: StitchSchemaKit.SplitterNodeEntity_V9.SplitterType
    public init(id: StitchSchemaKit.NodeId, lastModifiedDate: Foundation.Date, type: StitchSchemaKit.SplitterNodeEntity_V9.SplitterType)
    public static func == (a: StitchSchemaKit.SplitterNodeEntity_V9.SplitterNodeEntity, b: StitchSchemaKit.SplitterNodeEntity_V9.SplitterNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.SplitterNodeEntity_V9.SplitterNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterNodeEntity_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterNodeEntity_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeEntity_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeEntity_V8.LayerNodeEntity
  public typealias NodeEntitySchema = StitchSchemaKit.NodeEntity_V9
  public typealias Layer = StitchSchemaKit.Layer_V9.Layer
  public typealias NodeConnectionType = StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType
  public struct LayerNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let layer: StitchSchemaKit.LayerNodeEntity_V9.Layer
    public var positionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var sizePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var scalePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var anchoringPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var opacityPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var zIndexPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var masksPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var colorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var startColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var endColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var startAnchorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var endAnchorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var rotationXPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var rotationYPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var rotationZPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var lineColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var lineWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var blurPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var blendModePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var brightnessPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var colorInvertPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var contrastPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var hueRotationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var saturationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var pivotPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var enabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var isClippedPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var orientationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var paddingPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var setupModePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var shapePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var strokePositionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var strokeColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var strokeStartPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var strokeEndPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var textPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var fontSizePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var textDecorationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var textFontPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var imagePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var videoPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var fitStylePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var clippedPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var progressPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var model3DPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var mapTypePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var mapSpanPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public var placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType
    public let hasSidebarVisibility: Swift.Bool
    public let layerGroupId: StitchSchemaKit.NodeId?
    public let isExpandedInSidebar: Swift.Bool?
    public init(id: StitchSchemaKit.NodeId, layer: StitchSchemaKit.LayerNodeEntity_V9.Layer, positionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), sizePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), scalePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), anchoringPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), opacityPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), zIndexPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), masksPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), colorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), rotationXPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), rotationYPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), rotationZPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), lineColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), lineWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), blurPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), blendModePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), brightnessPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), colorInvertPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), contrastPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), hueRotationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), saturationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), pivotPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), enabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), blurRadiusPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), backgroundColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), isClippedPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), orientationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), paddingPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), setupModePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), allAnchorsPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), cameraDirectionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), isCameraEnabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), isShadowsEnabledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), shapePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), strokePositionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), strokeWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), strokeColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), strokeStartPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), strokeEndPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), coordinateSystemPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), cornerRadiusPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), canvasLineColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), canvasLineWidthPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), canvasPositionPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), textPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), fontSizePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), textAlignmentPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), verticalAlignmentPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), textDecorationPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), textFontPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), imagePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), videoPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), fitStylePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), clippedPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), isAnimatingPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), progressIndicatorStylePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), progressPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), model3DPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), mapTypePort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), mapLatLongPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), mapSpanPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), isSwitchToggledPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), placeholderTextPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), startColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), endColorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), startAnchorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), endAnchorPort: StitchSchemaKit.LayerNodeEntity_V9.NodeConnectionType = .values([]), hasSidebarVisibility: Swift.Bool, layerGroupId: StitchSchemaKit.NodeId?, isExpandedInSidebar: Swift.Bool?)
    public static func == (a: StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity, b: StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeEntity_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeEntity_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeEntity_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodeEntity_V8.NodeEntity
  public typealias PatchNodeEntitySchema = StitchSchemaKit.PatchNodeEntity_V9.PatchNodeEntity
  public typealias LayerNodeEntitySchema = StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity
  public typealias NodePortInputEntitySchemas = [StitchSchemaKit.NodePortInputEntity_V9.NodePortInputEntity]
  public struct NodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public var position: CoreFoundation.CGPoint
    public var zIndex: Swift.Double
    public var parentGroupNodeId: StitchSchemaKit.NodeId?
    public let patchNodeEntity: StitchSchemaKit.NodeEntity_V9.PatchNodeEntitySchema?
    public let layerNodeEntity: StitchSchemaKit.NodeEntity_V9.LayerNodeEntitySchema?
    public let isGroupNode: Swift.Bool
    public let title: Swift.String
    public let inputs: StitchSchemaKit.NodeEntity_V9.NodePortInputEntitySchemas
    public init(id: StitchSchemaKit.NodeId, position: CoreFoundation.CGPoint, zIndex: Swift.Double, parentGroupNodeId: StitchSchemaKit.NodeId?, patchNodeEntity: StitchSchemaKit.NodeEntity_V9.PatchNodeEntitySchema?, layerNodeEntity: StitchSchemaKit.NodeEntity_V9.LayerNodeEntitySchema?, isGroupNode: Swift.Bool, title: Swift.String, inputs: StitchSchemaKit.NodeEntity_V9.NodePortInputEntitySchemas)
    public static func == (a: StitchSchemaKit.NodeEntity_V9.NodeEntity, b: StitchSchemaKit.NodeEntity_V9.NodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeEntity_V9.NodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeEntity_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeEntity_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeKind_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodeKind_V8.NodeKind
  public enum NodeKind : Swift.Codable, Swift.Equatable, Swift.Hashable {
    case patch(StitchSchemaKit.Patch), layer(StitchSchemaKit.Layer), group
    public static func == (a: StitchSchemaKit.NodeKind_V9.NodeKind, b: StitchSchemaKit.NodeKind_V9.NodeKind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.NodeKind_V9.NodeKind : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeKind_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeKind_V9.PreviousInstance
}
public enum PatchNodeEntity_V9 {
  public typealias PreviousInstance = StitchSchemaKit.PatchNodeEntity_V8.PatchNodeEntity
  public typealias SplitterNodeEntitySchema = StitchSchemaKit.SplitterNodeEntity_V9.SplitterNodeEntity
  public typealias Patch = StitchSchemaKit.Patch_V9.Patch
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V9.UserVisibleType
  public struct PatchNodeEntity : Swift.Equatable {
    public let id: StitchSchemaKit.NodeId
    public let patch: StitchSchemaKit.PatchNodeEntity_V9.Patch
    public let userVisibleType: StitchSchemaKit.PatchNodeEntity_V9.UserVisibleType?
    public let splitterNode: StitchSchemaKit.PatchNodeEntity_V9.SplitterNodeEntitySchema?
    public let mathExpression: Swift.String?
    public init(id: StitchSchemaKit.NodeId, patch: StitchSchemaKit.PatchNodeEntity_V9.Patch, userVisibleType: StitchSchemaKit.PatchNodeEntity_V9.UserVisibleType?, splitterNode: StitchSchemaKit.PatchNodeEntity_V9.SplitterNodeEntitySchema?, mathExpression: Swift.String?)
    public static func == (a: StitchSchemaKit.PatchNodeEntity_V9.PatchNodeEntity, b: StitchSchemaKit.PatchNodeEntity_V9.PatchNodeEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.PatchNodeEntity_V9.PatchNodeEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PatchNodeEntity_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PatchNodeEntity_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerInputType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerInputType_V8.LayerInputType
  public enum LayerInputType {
    case position
    case size
    case scale
    case anchoring
    case opacity
    case zIndex
    case masks
    case color
    case rotationX
    case rotationY
    case rotationZ
    case lineColor
    case lineWidth
    case blur
    case blendMode
    case brightness
    case colorInvert
    case contrast
    case hueRotation
    case saturation
    case pivot
    case enabled
    case blurRadius
    case backgroundColor
    case isClipped
    case orientation
    case padding
    case setupMode
    case isAnimating
    case allAnchors
    case cameraDirection
    case isCameraEnabled
    case isShadowsEnabled
    case shape
    case strokePosition
    case strokeWidth
    case strokeColor
    case strokeStart
    case strokeEnd
    case coordinateSystem
    case cornerRadius
    case canvasLineColor
    case canvasLineWidth
    case canvasPosition
    case text
    case placeholderText
    case fontSize
    case textAlignment
    case verticalAlignment
    case textDecoration
    case textFont
    case image
    case video
    case model3D
    case fitStyle
    case clipped
    case progressIndicatorStyle
    case progress
    case mapType
    case mapLatLong
    case mapSpan
    case isSwitchToggled
    case startColor
    case endColor
    case startAnchor
    case endAnchor
    public static func == (a: StitchSchemaKit.LayerInputType_V9.LayerInputType, b: StitchSchemaKit.LayerInputType_V9.LayerInputType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerInputType_V9.LayerInputType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerInputType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerInputType_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension StitchSchemaKit.LayerInputType_V9.LayerInputType {
  public var schemaPortKeyPath: Swift.WritableKeyPath<StitchSchemaKit.LayerNodeEntity_V9.LayerNodeEntity, StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType> {
    get
  }
}
public enum NodeIOCoordinate_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOCoordinate_V8.NodeIOCoordinate
  public typealias NodeIOPortType = StitchSchemaKit.NodeIOPortType_V9.NodeIOPortType
  public struct NodeIOCoordinate : Swift.Hashable, Swift.Equatable {
    public var portType: StitchSchemaKit.NodeIOCoordinate_V9.NodeIOPortType
    public var nodeId: StitchSchemaKit.NodeId
    public init(portType: StitchSchemaKit.NodeIOCoordinate_V9.NodeIOPortType, nodeId: StitchSchemaKit.NodeId)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate, b: StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOCoordinate_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOCoordinate_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeIOPortType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodeIOPortType_V9.NodeIOPortType
  public typealias LayerInputType = StitchSchemaKit.LayerInputType_V9.LayerInputType
  public enum NodeIOPortType : Swift.Hashable, Swift.Equatable {
    case portIndex(Swift.Int)
    case keyPath(StitchSchemaKit.NodeIOPortType_V9.LayerInputType)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.NodeIOPortType_V9.NodeIOPortType, b: StitchSchemaKit.NodeIOPortType_V9.NodeIOPortType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.NodeIOPortType_V9.NodeIOPortType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeIOPortType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeIOPortType_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodePortInputEntity_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodePortInputEntity_V8.NodePortInputEntity
  public typealias PortValueSchemas = [StitchSchemaKit.PortValue_V9.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate
  public typealias NodeKind = StitchSchemaKit.NodeKind_V9.NodeKind
  public typealias UserVisibleType = StitchSchemaKit.UserVisibleType_V9.UserVisibleType
  public struct NodePortInputEntity : Swift.Equatable {
    public var id: StitchSchemaKit.NodePortInputEntity_V9.NodeIOCoordinate
    public let nodeKind: StitchSchemaKit.NodePortInputEntity_V9.NodeKind
    public let userVisibleType: StitchSchemaKit.NodePortInputEntity_V9.UserVisibleType?
    public let values: StitchSchemaKit.NodePortInputEntity_V9.PortValueSchemas?
    public let upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V9.NodeIOCoordinate?
    public init(id: StitchSchemaKit.NodePortInputEntity_V9.NodeIOCoordinate, nodeKind: StitchSchemaKit.NodePortInputEntity_V9.NodeKind, userVisibleType: StitchSchemaKit.NodePortInputEntity_V9.UserVisibleType?, values: StitchSchemaKit.NodePortInputEntity_V9.PortValueSchemas?, upstreamOutputCoordinate: StitchSchemaKit.NodePortInputEntity_V9.NodeIOCoordinate?)
    public static func == (a: StitchSchemaKit.NodePortInputEntity_V9.NodePortInputEntity, b: StitchSchemaKit.NodePortInputEntity_V9.NodePortInputEntity) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodePortInputEntity_V9.NodePortInputEntity : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodePortInputEntity_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodePortInputEntity_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeConnectionType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NodeConnectionType_V8.NodeConnectionType
  public typealias PortValues = [StitchSchemaKit.PortValue_V9.PortValue]
  public typealias NodeIOCoordinate = StitchSchemaKit.NodeIOCoordinate_V9.NodeIOCoordinate
  public enum NodeConnectionType : Swift.Equatable {
    case values(StitchSchemaKit.NodeConnectionType_V9.PortValues)
    case upstreamConnection(StitchSchemaKit.NodeConnectionType_V9.NodeIOCoordinate)
    public static func == (a: StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType, b: StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType) -> Swift.Bool
  }
}
extension StitchSchemaKit.NodeConnectionType_V9.NodeConnectionType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NodeConnectionType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NodeConnectionType_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValue_V9 {
  public typealias PreviousInstance = StitchSchemaKit.PortValue_V8.PortValue
  public typealias LayerDimension = StitchSchemaKit.LayerDimension_V9.LayerDimension
  public typealias Plane = StitchSchemaKit.Plane_V9.Plane
  public typealias NetworkRequestType = StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType
  public typealias LayerSize = StitchSchemaKit.LayerSize_V9.LayerSize
  public typealias Point3D = StitchSchemaKit.Point3D_V9.Point3D
  public typealias Point4D = StitchSchemaKit.Point4D_V9.Point4D
  public typealias AsyncMediaValue = StitchSchemaKit.AsyncMediaValue_V9.AsyncMediaValue
  public typealias StitchJSON = StitchSchemaKit.StitchJSON_V9.StitchJSON
  public typealias Anchoring = StitchSchemaKit.Anchoring_V9.Anchoring
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V9.CameraDirection
  public typealias ScrollMode = StitchSchemaKit.ScrollMode_V9.ScrollMode
  public typealias LayerTextAlignment = StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment
  public typealias LayerTextVerticalAlignment = StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment
  public typealias VisualMediaFitStyle = StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle
  public typealias ClassicAnimationCurve = StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve
  public typealias LightType = StitchSchemaKit.LightType_V9.LightType
  public typealias LayerStroke = StitchSchemaKit.LayerStroke_V9.LayerStroke
  public typealias DateAndTimeFormat = StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat
  public typealias CustomShape = StitchSchemaKit.CustomShape_V9.CustomShape
  public typealias ScrollJumpStyle = StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle
  public typealias ScrollDecelerationRate = StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate
  public typealias PortValueComparable = StitchSchemaKit.PortValueComparable_V9.PortValueComparable
  public typealias DelayStyle = StitchSchemaKit.DelayStyle_V9.DelayStyle
  public typealias ShapeCoordinates = StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates
  public typealias ShapeCommandType = StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType
  public typealias ShapeCommand = StitchSchemaKit.ShapeCommand_V9.ShapeCommand
  public typealias StitchOrientation = StitchSchemaKit.StitchOrientation_V9.StitchOrientation
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation
  public typealias StitchDeviceOrientation = StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation
  public typealias StitchFont = StitchSchemaKit.StitchFont_V9.StitchFont
  public typealias LayerTextDecoration = StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration
  public typealias StitchBlendMode = StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode
  public typealias StitchMapType = StitchSchemaKit.StitchMapType_V9.StitchMapType
  public typealias ProgressIndicatorStyle = StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle
  public typealias MobileHapticStyle = StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle
  public enum PortValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case bool(Swift.Bool)
    case int(Swift.Int)
    case number(Swift.Double)
    case layerDimension(StitchSchemaKit.PortValue_V9.LayerDimension)
    case matrixTransform(StitchSchemaKit.StitchMatrix)
    case plane(StitchSchemaKit.PortValue_V9.Plane)
    case networkRequestType(StitchSchemaKit.PortValue_V9.NetworkRequestType)
    case color(SwiftUI.Color)
    case size(StitchSchemaKit.PortValue_V9.LayerSize)
    case position(StitchSchemaKit.StitchPosition)
    case point3D(StitchSchemaKit.PortValue_V9.Point3D)
    case point4D(StitchSchemaKit.PortValue_V9.Point4D)
    case pulse(Foundation.TimeInterval)
    case asyncMedia(StitchSchemaKit.PortValue_V9.AsyncMediaValue?)
    case json(StitchSchemaKit.PortValue_V9.StitchJSON)
    case none
    case anchoring(StitchSchemaKit.PortValue_V9.Anchoring)
    case cameraDirection(StitchSchemaKit.PortValue_V9.CameraDirection)
    case assignedLayer(StitchSchemaKit.LayerNodeId?)
    case scrollMode(StitchSchemaKit.PortValue_V9.ScrollMode)
    case textAlignment(StitchSchemaKit.PortValue_V9.LayerTextAlignment)
    case textVerticalAlignment(StitchSchemaKit.PortValue_V9.LayerTextVerticalAlignment)
    case fitStyle(StitchSchemaKit.PortValue_V9.VisualMediaFitStyle)
    case animationCurve(StitchSchemaKit.PortValue_V9.ClassicAnimationCurve)
    case lightType(StitchSchemaKit.PortValue_V9.LightType)
    case layerStroke(StitchSchemaKit.PortValue_V9.LayerStroke)
    case textTransform(StitchSchemaKit.TextTransform)
    case dateAndTimeFormat(StitchSchemaKit.PortValue_V9.DateAndTimeFormat)
    case shape(StitchSchemaKit.PortValue_V9.CustomShape?)
    case scrollJumpStyle(StitchSchemaKit.PortValue_V9.ScrollJumpStyle)
    case scrollDecelerationRate(StitchSchemaKit.PortValue_V9.ScrollDecelerationRate)
    case comparable(StitchSchemaKit.PortValue_V9.PortValueComparable?)
    case delayStyle(StitchSchemaKit.PortValue_V9.DelayStyle)
    case shapeCoordinates(StitchSchemaKit.PortValue_V9.ShapeCoordinates)
    case shapeCommandType(StitchSchemaKit.PortValue_V9.ShapeCommandType)
    case shapeCommand(StitchSchemaKit.PortValue_V9.ShapeCommand)
    case orientation(StitchSchemaKit.PortValue_V9.StitchOrientation)
    case cameraOrientation(StitchSchemaKit.PortValue_V9.StitchCameraOrientation)
    case deviceOrientation(StitchSchemaKit.PortValue_V9.StitchDeviceOrientation)
    case vnImageCropOption(Vision.VNImageCropAndScaleOption)
    case textDecoration(StitchSchemaKit.PortValue_V9.LayerTextDecoration)
    case textFont(StitchSchemaKit.PortValue_V9.StitchFont)
    case blendMode(StitchSchemaKit.PortValue_V9.StitchBlendMode)
    case mapType(StitchSchemaKit.PortValue_V9.StitchMapType)
    case progressIndicatorStyle(StitchSchemaKit.PortValue_V9.ProgressIndicatorStyle)
    case mobileHapticStyle(StitchSchemaKit.PortValue_V9.MobileHapticStyle)
    public static func == (a: StitchSchemaKit.PortValue_V9.PortValue, b: StitchSchemaKit.PortValue_V9.PortValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.PortValue_V9.PortValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValue_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValue_V9.PreviousInstance
}
public enum Patch_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Patch_V8.Patch
  public enum Patch : Swift.String, Swift.CaseIterable, Swift.Equatable {
    case splitter, add, convertPosition, dragInteraction, pressInteraction, scrollInteraction, repeatingPulse, delay, pack, unpack, counter, flipSwitch, multiply, optionPicker, loop, time, deviceTime, location, random, greaterOrEqual, lessThanOrEqual, equals, restartPrototype, divide, hslColor, or, and, not, springAnimation, popAnimation, bouncyConverter, optionSwitch, pulseOnChange, pulse, classicAnimation, cubicBezierAnimation, curve, cubicBezierCurve, repeatingAnimation, loopBuilder, loopInsert, coreMLClassify, coreMLDetection, transition, imageImport, cameraFeed, model3DImport, arRaycasting, arAnchor, sampleAndHold, grayscale, loopSelect, videoImport, sampleRange, soundImport, speaker, microphone, networkRequest, valueForKey, valueAtIndex, loopOverArray, setValueForKey, jsonObject, jsonArray, arrayAppend, arrayCount, arrayJoin, arrayReverse, arraySort, getKeys, indexOf, subarray, valueAtPath, deviceMotion, deviceInfo, smoothValue, velocity, clip, max, mod, absoluteValue, round, progress, reverseProgress, wirelessBroadcaster, wirelessReceiver, rgba, arcTan2, sine, cosine, hapticFeedback, imageToBase64String, base64StringToImage, whenPrototypeStarts, soulver, optionEquals, subtract, squareRoot, length, min, power, equalsExactly, greaterThan, lessThan, colorToHSL, colorToHex, colorToRGB, hexColor, splitText, textEndsWith, textLength, textReplace, textStartsWith, textTransform, trimText, dateAndTimeFormatter, stopwatch, optionSender, any, loopCount, loopDedupe, loopFilter, loopOptionSwitch, loopRemove, loopReverse, loopShuffle, loopSum, loopToArray, runningTotal, layerInfo, triangleShape, circleShape, ovalShape, roundedRectangleShape, union, keyboard, jsonToShape, shapeToCommands, commandsToShape, mouse, sizePack, sizeUnpack, positionPack, positionUnpack, point3DPack, point3DUnpack, point4DPack, point4DUnpack, matrixTransformPack, matrixTransformUnpack, closePath, moveToPack, lineToPack, curveToPack, curveToUnpack, mathExpression, qrCodeDetection
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Patch_V9.Patch]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Patch_V9.Patch] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Patch_V9.Patch : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Patch_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Patch_V9.PreviousInstance
}
public enum Anchoring_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Anchoring_V8.Anchoring
  public struct Anchoring : Swift.Hashable, Swift.Equatable, Swift.Codable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double, y: Swift.Double)
    public static let top: Swift.Double
    public static let middle: Swift.Double
    public static let bottom: Swift.Double
    public static let left: Swift.Double
    public static let center: Swift.Double
    public static let right: Swift.Double
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.Anchoring_V9.Anchoring, b: StitchSchemaKit.Anchoring_V9.Anchoring) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.Anchoring_V9.Anchoring : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Anchoring_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Anchoring_V9.PreviousInstance
}
public enum AsyncMediaValue_V9 {
  public typealias PreviousInstance = StitchSchemaKit.AsyncMediaValue_V8.AsyncMediaValue
  public typealias MediaObjectId = StitchSchemaKit.MediaObjectId_V1.MediaObjectId
  public struct AsyncMediaValue : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var id: StitchSchemaKit.AsyncMediaValue_V9.MediaObjectId
    public var dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>
    public init(id: StitchSchemaKit.AsyncMediaValue_V9.MediaObjectId, dataType: StitchSchemaKit.DataType_V17.DataType<StitchSchemaKit.MediaKey>)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int, mediaKey: StitchSchemaKit.MediaKey)
    public init(nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public init(globalId: Foundation.UUID, nodeId: StitchSchemaKit.NodeId, mediaKey: StitchSchemaKit.MediaKey)
    public static func == (a: StitchSchemaKit.AsyncMediaValue_V9.AsyncMediaValue, b: StitchSchemaKit.AsyncMediaValue_V9.AsyncMediaValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.AsyncMediaValue_V9.AsyncMediaValue : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.AsyncMediaValue_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.AsyncMediaValue_V9.PreviousInstance
}
public enum CameraDirection_V9 {
  public typealias PreviousInstance = StitchSchemaKit.CameraDirection_V8.CameraDirection
  public enum CameraDirection : Swift.String, Swift.CaseIterable {
    case front, back
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.CameraDirection_V9.CameraDirection]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.CameraDirection_V9.CameraDirection] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.CameraDirection_V9.CameraDirection : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraDirection_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraDirection_V9.PreviousInstance
}
public enum CameraSettings_V9 {
  public typealias PreviousInstance = StitchSchemaKit.CameraSettings_V8.CameraSettings
  public typealias CameraDirection = StitchSchemaKit.CameraDirection_V9.CameraDirection
  public typealias StitchCameraOrientation = StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation
  public struct CameraSettings : Swift.Equatable, Swift.Hashable {
    public var direction: StitchSchemaKit.CameraSettings_V9.CameraDirection
    public var orientation: StitchSchemaKit.CameraSettings_V9.StitchCameraOrientation
    public init(direction: StitchSchemaKit.CameraSettings_V9.CameraDirection = .front, orientation: StitchSchemaKit.CameraSettings_V9.StitchCameraOrientation = .defaultCameraOrientation)
    public static func == (a: StitchSchemaKit.CameraSettings_V9.CameraSettings, b: StitchSchemaKit.CameraSettings_V9.CameraSettings) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.CameraSettings_V9.CameraSettings : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CameraSettings_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CameraSettings_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClassicAnimationCurve_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve
  public enum ClassicAnimationCurve : Swift.String, Swift.CaseIterable {
    case linear, quadraticIn, quadraticOut, quadraticInOut, sinusoidalIn, sinusoidalOut, sinusoidalInOut, exponentialIn, exponentialOut, exponentialInOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ClassicAnimationCurve_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ClassicAnimationCurve_V9.PreviousInstance
}
public enum CustomShape_V9 {
  public typealias PreviousInstance = StitchSchemaKit.CustomShape_V8.CustomShape
  public struct CustomShape : Swift.Equatable, Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public var shapes: StitchSchemaKit.ShapeDataArray {
      get
      set
    }
    public var baseFrame: CoreFoundation.CGRect {
      get
    }
    public var west: CoreFoundation.CGFloat {
      get
    }
    public var east: CoreFoundation.CGFloat {
      get
    }
    public var north: CoreFoundation.CGFloat {
      get
    }
    public var south: CoreFoundation.CGFloat {
      get
    }
    public init(shapes: StitchSchemaKit.ShapeDataArray)
    public init(_ shape: StitchSchemaKit.ShapeAndRect)
    public static func == (a: StitchSchemaKit.CustomShape_V9.CustomShape, b: StitchSchemaKit.CustomShape_V9.CustomShape) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension StitchSchemaKit.CustomShape_V9.CustomShape : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.CustomShape_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.CustomShape_V9.PreviousInstance
}
public enum DataType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.DataType_V8.DataType
  public typealias ValueType = StitchSchemaKit.StitchVersionedCodable & Swift.Hashable
  public enum DataType<Value> : Swift.Hashable where Value : StitchSchemaKit.StitchVersionedCodable, Value : Swift.Hashable {
    case source(Value)
    case computed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.DataType_V9.DataType<Value>, b: StitchSchemaKit.DataType_V9.DataType<Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.DataType_V9.DataType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DataType_V7.DataType<Value>)
  public typealias PreviousCodable = StitchSchemaKit.DataType_V7.DataType<Value>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DateAndTimeFormat_V9 {
  public typealias PreviousInstance = StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat
  public enum DateAndTimeFormat : Swift.String, Swift.CaseIterable {
    case none, short, medium, long, full
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DateAndTimeFormat_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DateAndTimeFormat_V9.PreviousInstance
}
public enum DelayStyle_V9 {
  public typealias PreviousInstance = StitchSchemaKit.DelayStyle_V8.DelayStyle
  public enum DelayStyle : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case always
    case increasing
    case decreasing
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.DelayStyle_V9.DelayStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.DelayStyle_V9.DelayStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.DelayStyle_V9.DelayStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.DelayStyle_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.DelayStyle_V9.PreviousInstance
}
public enum JSONCurveTo_V9 {
  public typealias PreviousInstance = StitchSchemaKit.JSONCurveTo_V8.JSONCurveTo
  public struct JSONCurveTo : Swift.Equatable, Swift.Hashable {
    public let point: CoreFoundation.CGPoint
    public let controlPoint1: CoreFoundation.CGPoint
    public let controlPoint2: CoreFoundation.CGPoint
    public init(point: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.JSONCurveTo_V9.JSONCurveTo, b: StitchSchemaKit.JSONCurveTo_V9.JSONCurveTo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONCurveTo_V9.JSONCurveTo : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONCurveTo_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONCurveTo_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeCommand_V9 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeCommand_V8.JSONShapeCommand
  public typealias JSONCurveTo = StitchSchemaKit.JSONCurveTo_V9.JSONCurveTo
  public enum JSONShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath
    case moveTo(CoreFoundation.CGPoint)
    case lineTo(CoreFoundation.CGPoint)
    case curveTo(StitchSchemaKit.JSONShapeCommand_V9.JSONCurveTo)
    public static func == (a: StitchSchemaKit.JSONShapeCommand_V9.JSONShapeCommand, b: StitchSchemaKit.JSONShapeCommand_V9.JSONShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.JSONShapeCommand_V9.JSONShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeCommand_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeCommand_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONShapeKeys_V9 {
  public typealias PreviousInstance = StitchSchemaKit.JSONShapeKeys_V8.JSONShapeKeys
  public struct JSONShapeKeys {
    public static let PATH: Swift.String
    public static let TYPE: Swift.String
    public static let POINT: Swift.String
    public static let CLOSE_PATH: Swift.String
    public static let MOVE_TO: Swift.String
    public static let LINE_TO: Swift.String
    public static let CURVE_TO: Swift.String
    public static let CURVE_FROM: Swift.String
  }
}
extension StitchSchemaKit.JSONShapeKeys_V9.JSONShapeKeys : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.JSONShapeKeys_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.JSONShapeKeys_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerDimension_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerDimension_V8.LayerDimension
  public enum LayerDimension : Swift.Equatable {
    case number(CoreFoundation.CGFloat), auto, parentPercent(Swift.Double), fill, hug
    public static func == (a: StitchSchemaKit.LayerDimension_V9.LayerDimension, b: StitchSchemaKit.LayerDimension_V9.LayerDimension) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerDimension_V9.LayerDimension : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerDimension_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerDimension_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerNodeId_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerNodeId_V8.LayerNodeId
  public struct LayerNodeId : Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public init(_ id: Foundation.UUID)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.LayerNodeId_V9.LayerNodeId, b: StitchSchemaKit.LayerNodeId_V9.LayerNodeId) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.LayerNodeId_V9.LayerNodeId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerNodeId_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerNodeId_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerSize_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerSize_V8.LayerSize
  public struct LayerSize : Swift.Equatable {
    public var width: StitchSchemaKit.LayerDimension
    public var height: StitchSchemaKit.LayerDimension
    public init(width: StitchSchemaKit.LayerDimension, height: StitchSchemaKit.LayerDimension)
    public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
    public init(width: StitchSchemaKit.LayerDimension, height: CoreFoundation.CGFloat)
    public init(width: CoreFoundation.CGFloat, height: StitchSchemaKit.LayerDimension)
    public init(_ size: CoreFoundation.CGSize)
    public static func == (a: StitchSchemaKit.LayerSize_V9.LayerSize, b: StitchSchemaKit.LayerSize_V9.LayerSize) -> Swift.Bool
  }
}
extension StitchSchemaKit.LayerSize_V9.LayerSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerSize_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerSize_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LayerStroke_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerStroke_V8.LayerStroke
  public enum LayerStroke : Swift.String, Swift.Codable, Swift.CaseIterable {
    case none, inside, outside
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerStroke_V9.LayerStroke]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerStroke_V9.LayerStroke] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerStroke_V9.LayerStroke : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerStroke_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerStroke_V9.PreviousInstance
}
public enum LayerTextAlignment_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment
  public enum LayerTextAlignment : Swift.String, Swift.CaseIterable {
    case left, center, right, justify
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextAlignment_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextAlignment_V9.PreviousInstance
}
public enum LayerTextDecoration_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration
  public enum LayerTextDecoration : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable {
    case none, underline, strikethrough
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextDecoration_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextDecoration_V9.PreviousInstance
}
public enum LayerTextVerticalAlignment_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment
  public enum LayerTextVerticalAlignment : Swift.String, Swift.CaseIterable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LayerTextVerticalAlignment_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LayerTextVerticalAlignment_V9.PreviousInstance
}
public enum LightType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.LightType_V8.LightType
  public enum LightType : Swift.String, Swift.CaseIterable {
    case ambient, omni, directional, spot, IES, probe, area
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.LightType_V9.LightType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.LightType_V9.LightType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.LightType_V9.LightType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.LightType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.LightType_V9.PreviousInstance
}
public enum MediaKey_V9 {
  public typealias PreviousInstance = StitchSchemaKit.MediaKey_V8.MediaKey
  public struct MediaKey : Swift.Codable, Swift.Hashable {
    public let filename: Swift.String
    public let fileExtension: Swift.String
    public init(filename: Swift.String, fileExtension: Swift.String)
    public init(_ url: Foundation.URL)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: StitchSchemaKit.MediaKey_V9.MediaKey, b: StitchSchemaKit.MediaKey_V9.MediaKey) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaKey_V9.MediaKey : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaKey_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaKey_V9.PreviousInstance
}
public enum MediaObjectId_V9 {
  public typealias PreviousInstance = StitchSchemaKit.MediaObjectId_V8.MediaObjectId
  public struct MediaObjectId : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public var globalId: Foundation.UUID
    public var nodeId: StitchSchemaKit.NodeId
    public var loopIndex: Swift.Int
    public init(globalId: Foundation.UUID = UUID(), nodeId: StitchSchemaKit.NodeId, loopIndex: Swift.Int)
    public static func == (a: StitchSchemaKit.MediaObjectId_V9.MediaObjectId, b: StitchSchemaKit.MediaObjectId_V9.MediaObjectId) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.MediaObjectId_V9.MediaObjectId : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MediaObjectId_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MediaObjectId_V9.PreviousInstance
}
public enum MobileHapticStyle_V9 {
  public typealias PreviousInstance = StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle
  public enum MobileHapticStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case light, medium, heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.MobileHapticStyle_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.MobileHapticStyle_V9.PreviousInstance
}
public enum NetworkRequestType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType
  public enum NetworkRequestType : Swift.String, Swift.CaseIterable {
    case get, post
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.NetworkRequestType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.NetworkRequestType_V9.PreviousInstance
}
public enum PathPoint_V9 {
  public typealias PreviousInstance = StitchSchemaKit.PathPoint_V8.PathPoint
  public struct PathPoint : Swift.Equatable, Swift.Hashable {
    public let x: CoreFoundation.CGFloat
    public let y: CoreFoundation.CGFloat
    public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.PathPoint_V9.PathPoint, b: StitchSchemaKit.PathPoint_V9.PathPoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PathPoint_V9.PathPoint : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PathPoint_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PathPoint_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Plane_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Plane_V8.Plane
  public enum Plane : Swift.String, Swift.CaseIterable {
    case any, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.Plane_V9.Plane]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.Plane_V9.Plane] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.Plane_V9.Plane : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Plane_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Plane_V9.PreviousInstance
}
public enum Point3D_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Point3D_V8.Point3D
  public struct Point3D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
    public static func == (a: StitchSchemaKit.Point3D_V9.Point3D, b: StitchSchemaKit.Point3D_V9.Point3D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point3D_V9.Point3D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point3D_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point3D_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Point4D_V9 {
  public typealias PreviousInstance = StitchSchemaKit.Point4D_V8.Point4D
  public struct Point4D : Swift.Equatable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var w: Swift.Double
    public init(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double)
    public static func == (a: StitchSchemaKit.Point4D_V9.Point4D, b: StitchSchemaKit.Point4D_V9.Point4D) -> Swift.Bool
  }
}
extension StitchSchemaKit.Point4D_V9.Point4D : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.Point4D_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.Point4D_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PortValueComparable_V9 {
  public typealias PreviousInstance = StitchSchemaKit.PortValueComparable_V8.PortValueComparable
  public enum PortValueComparable : Swift.Equatable, Swift.Hashable {
    case number(Swift.Double)
    case bool(Swift.Bool)
    case string(Swift.String)
    public static func == (a: StitchSchemaKit.PortValueComparable_V9.PortValueComparable, b: StitchSchemaKit.PortValueComparable_V9.PortValueComparable) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.PortValueComparable_V9.PortValueComparable : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PortValueComparable_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PortValueComparable_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProgressIndicatorStyle_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle
  public enum ProgressIndicatorStyle : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case circular, linear
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ProgressIndicatorStyle_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ProgressIndicatorStyle_V9.PreviousInstance
}
public enum RGBA_V9 {
  public typealias PreviousInstance = StitchSchemaKit.RGBA_V8.RGBA
  public struct RGBA : Swift.Equatable {
    public let red: CoreFoundation.CGFloat
    public let green: CoreFoundation.CGFloat
    public let blue: CoreFoundation.CGFloat
    public let alpha: CoreFoundation.CGFloat
    public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RGBA_V9.RGBA, b: StitchSchemaKit.RGBA_V9.RGBA) -> Swift.Bool
  }
}
extension StitchSchemaKit.RGBA_V9.RGBA : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RGBA_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RGBA_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RoundedRectangleData_V9 {
  public typealias PreviousInstance = StitchSchemaKit.RoundedRectangleData_V8.RoundedRectangleData
  public struct RoundedRectangleData : Swift.Equatable {
    public var rect: CoreFoundation.CGRect
    public var cornerRadius: CoreFoundation.CGFloat
    public init(rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
    public static func == (a: StitchSchemaKit.RoundedRectangleData_V9.RoundedRectangleData, b: StitchSchemaKit.RoundedRectangleData_V9.RoundedRectangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.RoundedRectangleData_V9.RoundedRectangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.RoundedRectangleData_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.RoundedRectangleData_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScrollDecelerationRate_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate
  public enum ScrollDecelerationRate : Swift.String, Swift.CaseIterable {
    case normal
    case fast
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollDecelerationRate_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollDecelerationRate_V9.PreviousInstance
}
public enum ScrollJumpStyle_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle
  public enum ScrollJumpStyle : Swift.String, Swift.CaseIterable {
    case animated
    case instant
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollJumpStyle_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollJumpStyle_V9.PreviousInstance
}
public enum ScrollMode_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ScrollMode_V8.ScrollMode
  public enum ScrollMode : Swift.String, Swift.CaseIterable {
    case free
    case paging
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ScrollMode_V9.ScrollMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ScrollMode_V9.ScrollMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ScrollMode_V9.ScrollMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ScrollMode_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ScrollMode_V9.PreviousInstance
}
public enum ShapeAndRect_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeAndRect_V8.ShapeAndRect
  public enum ShapeAndRect : Swift.Equatable {
    case oval(CoreFoundation.CGRect), circle(CoreFoundation.CGRect), rectangle(StitchSchemaKit.RoundedRectangleData), triangle(StitchSchemaKit.TriangleData), custom(StitchSchemaKit.JSONShapeCommands)
    public static func == (a: StitchSchemaKit.ShapeAndRect_V9.ShapeAndRect, b: StitchSchemaKit.ShapeAndRect_V9.ShapeAndRect) -> Swift.Bool
  }
}
extension StitchSchemaKit.ShapeAndRect_V9.ShapeAndRect : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeAndRect_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeAndRect_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ShapeCommandType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType
  public enum ShapeCommandType : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case closePath, lineTo, moveTo, curveTo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommandType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommandType_V9.PreviousInstance
}
public enum ShapeCommand_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCommand_V8.ShapeCommand
  public enum ShapeCommand : Swift.Equatable, Swift.Hashable {
    case closePath, lineTo(point: StitchSchemaKit.PathPoint), moveTo(point: StitchSchemaKit.PathPoint), curveTo(curveFrom: StitchSchemaKit.PathPoint, point: StitchSchemaKit.PathPoint, curveTo: StitchSchemaKit.PathPoint)
    public static func == (a: StitchSchemaKit.ShapeCommand_V9.ShapeCommand, b: StitchSchemaKit.ShapeCommand_V9.ShapeCommand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCommand_V9.ShapeCommand : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCommand_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCommand_V9.PreviousInstance
}
extension StitchSchemaKit.ShapeCommand_V9.ShapeCommand : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ShapeCoordinates_V9 {
  public typealias PreviousInstance = StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates
  public enum ShapeCoordinates : Swift.String, Swift.Equatable, Swift.CaseIterable {
    case relative
    case absolute
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.ShapeCoordinates_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.ShapeCoordinates_V9.PreviousInstance
}
public enum SidebarLayerData_V9 {
  public typealias PreviousInstance = StitchSchemaKit.SidebarLayerData_V8.SidebarLayerData
  public struct SidebarLayerData : Swift.Equatable, Swift.Hashable {
    public let id: StitchSchemaKit.NodeId
    public var children: [StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData]?
    public init(id: StitchSchemaKit.NodeId, children: [StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData]? = nil)
    public static func == (a: StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData, b: StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.SidebarLayerData_V9.SidebarLayerData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SidebarLayerData_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SidebarLayerData_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchBlendMode_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode
  public enum StitchBlendMode : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case normal
    case darken
    case multiply
    case colorBurn
    case plusDarker
    case lighten
    case screen
    case colorDodge
    case plusLighter
    case overlay
    case softLight
    case hardLight
    case difference
    case exclusion
    case hue
    case saturation
    case color
    case luminosity
    case sourceAtop
    case destinationOver
    case destinationOut
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchBlendMode_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchBlendMode_V9.PreviousInstance
}
public enum StitchCameraOrientation_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation
  public enum StitchCameraOrientation : Swift.String, Swift.Equatable, Swift.Hashable, Swift.CaseIterable {
    case portrait, portraitUpsideDown, landscapeLeft, landscapeRight
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchCameraOrientation_V9.PreviousInstance)
  @_Concurrency.MainActor public static let defaultCameraOrientation: StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation
  public typealias PreviousCodable = StitchSchemaKit.StitchCameraOrientation_V9.PreviousInstance
}
public enum StitchDeviceOrientation_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation
  public enum StitchDeviceOrientation : Swift.String, Swift.CaseIterable {
    case unknown, portrait, portraitUpsideDown, landscapeLeft, landscapeRight, faceUp, faceDown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchDeviceOrientation_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchDeviceOrientation_V9.PreviousInstance
}
public enum StitchFontChoice_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice
  public enum StitchFontChoice : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case sf, sfMono, sfRounded, newYorkSerif
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontChoice_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontChoice_V9.PreviousInstance
}
public enum StitchFontWeight_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight
  public enum StitchFontWeight : Swift.String, Swift.Equatable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
    case SF_regular, SF_black, SF_thin, SF_light, SF_ultraLight, SF_medium, SF_semibold, SF_bold, SF_heavy, SFMono_regular, SFMono_black, SFMono_thin, SFMono_light, SFMono_ultraLight, SFMono_medium, SFMono_semibold, SFMono_bold, SFMono_heavy, SFRounded_regular, SFRounded_black, SFRounded_thin, SFRounded_light, SFRounded_ultraLight, SFRounded_medium, SFRounded_semibold, SFRounded_bold, SFRounded_heavy, NewYorkSerif_regular, NewYorkSerif_black, NewYorkSerif_thin, NewYorkSerif_light, NewYorkSerif_ultraLight, NewYorkSerif_medium, NewYorkSerif_semibold, NewYorkSerif_bold, NewYorkSerif_heavy
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFontWeight_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFontWeight_V9.PreviousInstance
}
public enum StitchFont_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchFont_V8.StitchFont
  public typealias StitchFontChoice = StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice
  public typealias StitchFontWeight = StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight
  public struct StitchFont : Swift.Equatable, Swift.Codable, Swift.Hashable {
    public var fontChoice: StitchSchemaKit.StitchFont_V9.StitchFontChoice
    public var fontWeight: StitchSchemaKit.StitchFont_V9.StitchFontWeight
    public init(fontChoice: StitchSchemaKit.StitchFont_V9.StitchFontChoice, fontWeight: StitchSchemaKit.StitchFont_V9.StitchFontWeight)
    public static func == (a: StitchSchemaKit.StitchFont_V9.StitchFont, b: StitchSchemaKit.StitchFont_V9.StitchFont) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension StitchSchemaKit.StitchFont_V9.StitchFont : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchFont_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchFont_V9.PreviousInstance
}
public enum StitchJSON_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchJSON_V8.StitchJSON
  public struct StitchJSON : Swift.Equatable, Swift.Hashable {
    public static func == (lhs: StitchSchemaKit.StitchJSON_V9.StitchJSON, rhs: StitchSchemaKit.StitchJSON_V9.StitchJSON) -> Swift.Bool
    public var id: Foundation.UUID
    public var value: SwiftyJSON.JSON {
      get
      set
    }
    public init(id: Foundation.UUID, value: SwiftyJSON.JSON)
    public init(_ value: SwiftyJSON.JSON)
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension StitchSchemaKit.StitchJSON_V9.StitchJSON : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchJSON_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchJSON_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StitchMapType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchMapType_V8.StitchMapType
  public enum StitchMapType : Swift.String, Swift.Equatable, Swift.Codable, Swift.CaseIterable, Swift.Sendable {
    case standard, satellite, hybrid, hybridFlyover, satelliteFlyover, mutedStandard
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchMapType_V9.StitchMapType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchMapType_V9.StitchMapType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchMapType_V9.StitchMapType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchMapType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchMapType_V9.PreviousInstance
}
public enum StitchOrientation_V9 {
  public typealias PreviousInstance = StitchSchemaKit.StitchOrientation_V8.StitchOrientation
  public enum StitchOrientation : Swift.String, Swift.CaseIterable {
    case none, horizontal, vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.StitchOrientation_V9.StitchOrientation]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.StitchOrientation_V9.StitchOrientation] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.StitchOrientation_V9.StitchOrientation : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.StitchOrientation_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.StitchOrientation_V9.PreviousInstance
}
public enum TextTransform_V9 {
  public typealias PreviousInstance = StitchSchemaKit.TextTransform_V8.TextTransform
  public enum TextTransform : Swift.String, Swift.CaseIterable {
    case uppercase, lowercase, capitalize
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.TextTransform_V9.TextTransform]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.TextTransform_V9.TextTransform] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.TextTransform_V9.TextTransform : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TextTransform_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TextTransform_V9.PreviousInstance
}
public enum TriangleData_V9 {
  public typealias PreviousInstance = StitchSchemaKit.TriangleData_V8.TriangleData
  public struct TriangleData : Swift.Equatable {
    public var points: [CoreFoundation.CGPoint] {
      get
    }
    public let p1: CoreFoundation.CGPoint
    public let p2: CoreFoundation.CGPoint
    public let p3: CoreFoundation.CGPoint
    public init(p1: CoreFoundation.CGPoint, p2: CoreFoundation.CGPoint, p3: CoreFoundation.CGPoint)
    public static func == (a: StitchSchemaKit.TriangleData_V9.TriangleData, b: StitchSchemaKit.TriangleData_V9.TriangleData) -> Swift.Bool
  }
}
extension StitchSchemaKit.TriangleData_V9.TriangleData : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.TriangleData_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.TriangleData_V9.PreviousInstance
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VisualMediaFitStyle_V9 {
  public typealias PreviousInstance = StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle
  public enum VisualMediaFitStyle : Swift.String, Swift.CaseIterable {
    case fit, fill, stretch
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.VisualMediaFitStyle_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.VisualMediaFitStyle_V9.PreviousInstance
}
public enum PreviewSize_V9 {
  public typealias PreviousInstance = StitchSchemaKit.PreviewSize_V8.PreviewSize
  public enum PreviewSize : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String {
      get
    }
    case iPhone14
    case iPhone14Plus
    case iPhone14Pro
    case iPhone14ProMax
    case iPhone13
    case iPhone13mini
    case iPhone13ProMax
    case iPhone13Pro
    case iPhone12
    case iPhone12mini
    case iPhone12ProMax
    case iPhone12Pro
    case iPhoneSe2ndGen
    case iPhone11ProMax
    case iPhone11Pro
    case iPhone11
    case iPhoneSE1stGen
    case iPadMini6thGen
    case iPad9thGen
    case iPadPro12Inch
    case iPadPro11Inch
    case iPadAir4thGen
    case iPadMini5thGen
    case iPadAir3rdGen
    case iPadPro10Inch
    case MacBookAir
    case MacBook
    case MacBookPro
    case iMacRetina24Inch
    case iMacRetina27Inch
    case iMacProRetina27Inch
    case custom
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.PreviewSize_V9.PreviewSize]
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.PreviewSize_V9.PreviewSize] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.PreviewSize_V9.PreviewSize : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.PreviewSize_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.PreviewSize_V9.PreviousInstance
}
public enum SplitterType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.SplitterType_V8.SplitterType
  public enum SplitterType : Swift.String, Swift.CaseIterable {
    case inline, input, output
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.SplitterType_V9.SplitterType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.SplitterType_V9.SplitterType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.SplitterType_V9.SplitterType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.SplitterType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.SplitterType_V9.PreviousInstance
}
public enum UserVisibleType_V9 {
  public typealias PreviousInstance = StitchSchemaKit.UserVisibleType_V8.UserVisibleType
  public enum UserVisibleType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case string
    case bool
    case int
    case color
    case number
    case layerDimension
    case size
    case position
    case point3D
    case point4D
    case matrixTransform
    case plane
    case pulse
    case media
    case json
    case networkRequestType
    case none
    case anchoring
    case cameraDirection
    case interactionId
    case scrollMode
    case textAlignment
    case textVerticalAlignment
    case fitStyle
    case animationCurve
    case lightType
    case layerStroke
    case textTransform
    case dateAndTimeFormat
    case shape
    case scrollJumpStyle
    case scrollDecelerationRate
    case delayStyle
    case shapeCoordinates
    case shapeCommand
    case shapeCommandType
    case orientation
    case cameraOrientation
    case deviceOrientation
    case vnImageCropOption
    case textDecoration
    case textFont
    case blendMode
    case mapType
    case progressIndicatorStyle
    case mobileHapticStyle
    public init?(rawValue: Swift.String)
    public typealias AllCases = [StitchSchemaKit.UserVisibleType_V9.UserVisibleType]
    public typealias RawValue = Swift.String
    public static var allCases: [StitchSchemaKit.UserVisibleType_V9.UserVisibleType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension StitchSchemaKit.UserVisibleType_V9.UserVisibleType : StitchSchemaKit.StitchVersionedCodable {
  public init(previousInstance: StitchSchemaKit.UserVisibleType_V9.PreviousInstance)
  public typealias PreviousCodable = StitchSchemaKit.UserVisibleType_V9.PreviousInstance
}
extension StitchSchemaKit.StitchSchemaVersion : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V17.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V17.PreviewSize : Swift.RawRepresentable {}
extension SwiftUI.Color.CodingKeys : Swift.Equatable {}
extension SwiftUI.Color.CodingKeys : Swift.Hashable {}
extension SwiftUI.Color.CodingKeys : Swift.RawRepresentable {}
extension StitchSchemaKit.InteractionType_V1.InteractionType : Swift.Hashable {}
extension StitchSchemaKit.InteractionType_V1.InteractionType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V1.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V1.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V1.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.Patch_V1.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V1.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.Anchoring_V1.Anchoring : Swift.Equatable {}
extension StitchSchemaKit.Anchoring_V1.Anchoring : Swift.Hashable {}
extension StitchSchemaKit.Anchoring_V1.Anchoring : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V1.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V1.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V1.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V1.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V1.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V1.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V1.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V1.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V1.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V1.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V1.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V1.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V1.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V1.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V1.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V1.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V1.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V1.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V1.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V1.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V1.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V1.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V1.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V1.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V1.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V1.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V1.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V1.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V1.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V1.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V1.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V1.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V1.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V1.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V1.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V1.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V1.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V1.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V1.PreviewSize : Swift.Equatable {}
extension StitchSchemaKit.PreviewSize_V1.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V1.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V1.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V1.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V1.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V1.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V1.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V1.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V10.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V10.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V10.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V10.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V10.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V10.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V10.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V10.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V10.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V10.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V10.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V10.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V10.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V10.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V10.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V10.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V10.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V10.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V10.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V10.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V10.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V10.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V10.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V10.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V10.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V10.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V10.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V10.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V10.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V10.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V10.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V10.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V10.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V10.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V10.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V10.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V10.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V10.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V10.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V10.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V10.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V10.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V10.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V10.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V10.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V10.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V10.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V10.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V10.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V10.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V10.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V10.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V10.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V10.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V10.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V10.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V10.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V10.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V11.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V11.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V11.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V11.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V11.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V11.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V11.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V11.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V11.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V11.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V11.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V11.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V11.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V11.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V11.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V11.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V11.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V11.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V11.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V11.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V11.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V11.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V11.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V11.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V11.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V11.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V11.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V11.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V11.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V11.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V11.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V11.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V11.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V11.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V11.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V11.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V11.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V11.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V11.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V11.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V11.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V11.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V11.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V11.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V11.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V11.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V11.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V11.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V11.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V11.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V11.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V11.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V11.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V11.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V11.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V11.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V11.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V11.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V12.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V12.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V12.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V12.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V12.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V12.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V12.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V12.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V12.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V12.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V12.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V12.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V12.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V12.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V12.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V12.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V12.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V12.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V12.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V12.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V12.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V12.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V12.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V12.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V12.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V12.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V12.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V12.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V12.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V12.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V12.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V12.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V12.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V12.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V12.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V12.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V12.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V12.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V12.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V12.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V12.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V12.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V12.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V12.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V12.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V12.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V12.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V12.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V12.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V12.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V12.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V12.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V12.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V12.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V12.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V12.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V12.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V12.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V13.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V13.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V13.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V13.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V13.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V13.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V13.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V13.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V13.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V13.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V13.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V13.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V13.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V13.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V13.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V13.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V13.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V13.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V13.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V13.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V13.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V13.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V13.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V13.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V13.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V13.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V13.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V13.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V13.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V13.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V13.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V13.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V13.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V13.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V13.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V13.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V13.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V13.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V13.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V13.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V13.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V13.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V13.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V13.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V13.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V13.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineCap_V13.StrokeLineCap : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineJoin_V13.StrokeLineJoin : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V13.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V13.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V13.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V13.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V13.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V13.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V13.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V13.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V13.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V13.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V13.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V13.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V14.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V14.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V14.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V14.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V14.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V14.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V14.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V14.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V14.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V14.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V14.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V14.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V14.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V14.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V14.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V14.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V14.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V14.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V14.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V14.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V14.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V14.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V14.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V14.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V14.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V14.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V14.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V14.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V14.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V14.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V14.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V14.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V14.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V14.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V14.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V14.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V14.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V14.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V14.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V14.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V14.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V14.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V14.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V14.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V14.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V14.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineCap_V14.StrokeLineCap : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineJoin_V14.StrokeLineJoin : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V14.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V14.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V14.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V14.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V14.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V14.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V14.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V14.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V14.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V14.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V14.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V14.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V15.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V15.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V15.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V15.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V15.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V15.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V15.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V15.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V15.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V15.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V15.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V15.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V15.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V15.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V15.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V15.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V15.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V15.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V15.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V15.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V15.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V15.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V15.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V15.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V15.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V15.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V15.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V15.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V15.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V15.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V15.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V15.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V15.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V15.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V15.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V15.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V15.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V15.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V15.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V15.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V15.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V15.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V15.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V15.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V15.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V15.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineCap_V15.StrokeLineCap : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineJoin_V15.StrokeLineJoin : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V15.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V15.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V15.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V15.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V15.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V15.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V15.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V15.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V15.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V15.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V15.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V15.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V16.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V16.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V16.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V16.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V16.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V16.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V16.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V16.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V16.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V16.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V16.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V16.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V16.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V16.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V16.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V16.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V16.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V16.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V16.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V16.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V16.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V16.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V16.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V16.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V16.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V16.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V16.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V16.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V16.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V16.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V16.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V16.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V16.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V16.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V16.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V16.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V16.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V16.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V16.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V16.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V16.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V16.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V16.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V16.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V16.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V16.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineCap_V16.StrokeLineCap : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineJoin_V16.StrokeLineJoin : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V16.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V16.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V16.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V16.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V16.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V16.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V16.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V16.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V16.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V16.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V16.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V16.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V17.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V17.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V17.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V17.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V17.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V17.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V17.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V17.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V17.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V17.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V17.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V17.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V17.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V17.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V17.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V17.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V17.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V17.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V17.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V17.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V17.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V17.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V17.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V17.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V17.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V17.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V17.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V17.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V17.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V17.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V17.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V17.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V17.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V17.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V17.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V17.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V17.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V17.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V17.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V17.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V17.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V17.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V17.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V17.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V17.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V17.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineCap_V17.StrokeLineCap : Swift.RawRepresentable {}
extension StitchSchemaKit.StrokeLineJoin_V17.StrokeLineJoin : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V17.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V17.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V17.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V17.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V17.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V17.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V17.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V17.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V17.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V17.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.InteractionType_V2.InteractionType : Swift.Hashable {}
extension StitchSchemaKit.InteractionType_V2.InteractionType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V2.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V2.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V2.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.Patch_V2.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V2.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.Anchoring_V2.Anchoring : Swift.Equatable {}
extension StitchSchemaKit.Anchoring_V2.Anchoring : Swift.Hashable {}
extension StitchSchemaKit.Anchoring_V2.Anchoring : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V2.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V2.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V2.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V2.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V2.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V2.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V2.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V2.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V2.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V2.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V2.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V2.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V2.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V2.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V2.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V2.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V2.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V2.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V2.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V2.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V2.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V2.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V2.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V2.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V2.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V2.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V2.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V2.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V2.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V2.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V2.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V2.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V2.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V2.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V2.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V2.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V2.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V2.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V2.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V2.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V2.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V2.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V2.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V2.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V2.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V2.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.InteractionType_V3.InteractionType : Swift.Hashable {}
extension StitchSchemaKit.InteractionType_V3.InteractionType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V3.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V3.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V3.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.Patch_V3.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V3.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.Anchoring_V3.Anchoring : Swift.Equatable {}
extension StitchSchemaKit.Anchoring_V3.Anchoring : Swift.Hashable {}
extension StitchSchemaKit.Anchoring_V3.Anchoring : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V3.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V3.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V3.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V3.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V3.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V3.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V3.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V3.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V3.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V3.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V3.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V3.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V3.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V3.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V3.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V3.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V3.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V3.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V3.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V3.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V3.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V3.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V3.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V3.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V3.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V3.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V3.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V3.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V3.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V3.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V3.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V3.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V3.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V3.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V3.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V3.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V3.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V3.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V3.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V3.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V3.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V3.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V3.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V3.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V3.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V3.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V3.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V4.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V4.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V4.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.Patch_V4.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V4.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.Anchoring_V4.Anchoring : Swift.Equatable {}
extension StitchSchemaKit.Anchoring_V4.Anchoring : Swift.Hashable {}
extension StitchSchemaKit.Anchoring_V4.Anchoring : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V4.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V4.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V4.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V4.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V4.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V4.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V4.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V4.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V4.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V4.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V4.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V4.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V4.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V4.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V4.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V4.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V4.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V4.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V4.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V4.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V4.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V4.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V4.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V4.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V4.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V4.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V4.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V4.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V4.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V4.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V4.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V4.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V4.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V4.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V4.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V4.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V4.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V4.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V4.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V4.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V4.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V4.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V4.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V4.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V4.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V4.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V4.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V4.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V4.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V5.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V5.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V5.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.Patch_V5.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V5.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V5.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V5.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V5.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V5.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V5.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V5.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V5.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V5.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V5.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V5.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V5.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V5.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V5.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V5.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V5.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V5.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V5.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V5.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V5.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V5.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V5.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V5.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V5.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V5.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V5.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V5.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V5.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V5.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V5.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V5.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V5.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V5.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V5.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V5.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V5.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V5.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V5.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V5.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V5.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V5.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V5.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V5.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V5.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V5.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V5.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V5.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V5.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V5.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V5.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V5.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V5.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V6.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V6.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V6.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V6.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V6.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V6.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V6.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V6.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V6.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V6.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V6.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V6.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V6.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V6.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V6.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V6.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V6.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V6.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V6.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V6.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V6.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V6.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V6.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V6.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V6.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V6.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V6.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V6.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V6.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V6.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V6.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V6.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V6.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V6.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V6.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V6.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V6.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V6.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V6.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V6.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V6.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V6.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V6.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V6.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V6.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V6.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V6.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V6.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V6.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V6.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V6.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V6.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V6.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V6.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V6.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V6.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V6.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V6.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V7.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V7.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V7.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V7.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V7.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V7.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V7.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V7.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V7.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V7.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V7.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V7.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V7.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V7.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V7.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V7.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V7.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V7.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V7.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V7.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V7.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V7.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V7.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V7.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V7.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V7.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V7.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V7.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V7.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V7.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V7.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V7.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V7.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V7.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V7.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V7.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V7.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V7.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V7.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V7.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V7.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V7.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V7.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V7.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V7.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V7.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V7.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V7.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V7.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V7.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V7.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V7.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V7.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V7.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V7.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V7.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V7.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V7.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V8.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V8.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V8.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V8.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V8.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V8.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V8.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V8.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V8.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V8.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V8.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V8.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V8.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V8.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V8.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V8.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V8.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V8.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V8.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V8.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V8.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V8.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V8.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V8.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V8.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V8.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V8.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V8.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V8.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V8.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V8.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V8.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V8.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V8.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V8.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V8.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V8.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V8.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V8.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V8.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V8.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V8.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V8.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V8.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V8.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V8.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V8.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V8.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V8.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V8.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V8.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V8.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V8.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V8.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V8.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V8.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V8.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V8.UserVisibleType : Swift.RawRepresentable {}
extension StitchSchemaKit.Layer_V9.Layer : Swift.Equatable {}
extension StitchSchemaKit.Layer_V9.Layer : Swift.Hashable {}
extension StitchSchemaKit.Layer_V9.Layer : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerInputType_V9.LayerInputType : Swift.Equatable {}
extension StitchSchemaKit.LayerInputType_V9.LayerInputType : Swift.Hashable {}
extension StitchSchemaKit.Patch_V9.Patch : Swift.Hashable {}
extension StitchSchemaKit.Patch_V9.Patch : Swift.RawRepresentable {}
extension StitchSchemaKit.CameraDirection_V9.CameraDirection : Swift.Equatable {}
extension StitchSchemaKit.CameraDirection_V9.CameraDirection : Swift.Hashable {}
extension StitchSchemaKit.CameraDirection_V9.CameraDirection : Swift.RawRepresentable {}
extension StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve : Swift.Equatable {}
extension StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve : Swift.Hashable {}
extension StitchSchemaKit.ClassicAnimationCurve_V9.ClassicAnimationCurve : Swift.RawRepresentable {}
extension StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat : Swift.Equatable {}
extension StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat : Swift.Hashable {}
extension StitchSchemaKit.DateAndTimeFormat_V9.DateAndTimeFormat : Swift.RawRepresentable {}
extension StitchSchemaKit.DelayStyle_V9.DelayStyle : Swift.Hashable {}
extension StitchSchemaKit.DelayStyle_V9.DelayStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerStroke_V9.LayerStroke : Swift.Equatable {}
extension StitchSchemaKit.LayerStroke_V9.LayerStroke : Swift.Hashable {}
extension StitchSchemaKit.LayerStroke_V9.LayerStroke : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextAlignment_V9.LayerTextAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration : Swift.Hashable {}
extension StitchSchemaKit.LayerTextDecoration_V9.LayerTextDecoration : Swift.RawRepresentable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment : Swift.Equatable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment : Swift.Hashable {}
extension StitchSchemaKit.LayerTextVerticalAlignment_V9.LayerTextVerticalAlignment : Swift.RawRepresentable {}
extension StitchSchemaKit.LightType_V9.LightType : Swift.Equatable {}
extension StitchSchemaKit.LightType_V9.LightType : Swift.Hashable {}
extension StitchSchemaKit.LightType_V9.LightType : Swift.RawRepresentable {}
extension StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle : Swift.Hashable {}
extension StitchSchemaKit.MobileHapticStyle_V9.MobileHapticStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType : Swift.Equatable {}
extension StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType : Swift.Hashable {}
extension StitchSchemaKit.NetworkRequestType_V9.NetworkRequestType : Swift.RawRepresentable {}
extension StitchSchemaKit.Plane_V9.Plane : Swift.Equatable {}
extension StitchSchemaKit.Plane_V9.Plane : Swift.Hashable {}
extension StitchSchemaKit.Plane_V9.Plane : Swift.RawRepresentable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle : Swift.Hashable {}
extension StitchSchemaKit.ProgressIndicatorStyle_V9.ProgressIndicatorStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate : Swift.Equatable {}
extension StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate : Swift.Hashable {}
extension StitchSchemaKit.ScrollDecelerationRate_V9.ScrollDecelerationRate : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle : Swift.Equatable {}
extension StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle : Swift.Hashable {}
extension StitchSchemaKit.ScrollJumpStyle_V9.ScrollJumpStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.ScrollMode_V9.ScrollMode : Swift.Equatable {}
extension StitchSchemaKit.ScrollMode_V9.ScrollMode : Swift.Hashable {}
extension StitchSchemaKit.ScrollMode_V9.ScrollMode : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCommandType_V9.ShapeCommandType : Swift.RawRepresentable {}
extension StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates : Swift.Hashable {}
extension StitchSchemaKit.ShapeCoordinates_V9.ShapeCoordinates : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode : Swift.Hashable {}
extension StitchSchemaKit.StitchBlendMode_V9.StitchBlendMode : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchCameraOrientation_V9.StitchCameraOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchDeviceOrientation_V9.StitchDeviceOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontChoice_V9.StitchFontChoice : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchFontWeight_V9.StitchFontWeight : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchMapType_V9.StitchMapType : Swift.Hashable {}
extension StitchSchemaKit.StitchMapType_V9.StitchMapType : Swift.RawRepresentable {}
extension StitchSchemaKit.StitchOrientation_V9.StitchOrientation : Swift.Equatable {}
extension StitchSchemaKit.StitchOrientation_V9.StitchOrientation : Swift.Hashable {}
extension StitchSchemaKit.StitchOrientation_V9.StitchOrientation : Swift.RawRepresentable {}
extension StitchSchemaKit.TextTransform_V9.TextTransform : Swift.Equatable {}
extension StitchSchemaKit.TextTransform_V9.TextTransform : Swift.Hashable {}
extension StitchSchemaKit.TextTransform_V9.TextTransform : Swift.RawRepresentable {}
extension StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle : Swift.Equatable {}
extension StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle : Swift.Hashable {}
extension StitchSchemaKit.VisualMediaFitStyle_V9.VisualMediaFitStyle : Swift.RawRepresentable {}
extension StitchSchemaKit.PreviewSize_V9.PreviewSize : Swift.Hashable {}
extension StitchSchemaKit.PreviewSize_V9.PreviewSize : Swift.RawRepresentable {}
extension StitchSchemaKit.SplitterType_V9.SplitterType : Swift.Equatable {}
extension StitchSchemaKit.SplitterType_V9.SplitterType : Swift.Hashable {}
extension StitchSchemaKit.SplitterType_V9.SplitterType : Swift.RawRepresentable {}
extension StitchSchemaKit.UserVisibleType_V9.UserVisibleType : Swift.Equatable {}
extension StitchSchemaKit.UserVisibleType_V9.UserVisibleType : Swift.Hashable {}
extension StitchSchemaKit.UserVisibleType_V9.UserVisibleType : Swift.RawRepresentable {}
